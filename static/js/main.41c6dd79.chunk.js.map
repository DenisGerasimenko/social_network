{"version":3,"sources":["api/api.ts","redux/dialogs-reducer.ts","components/navbar/Navbar.module.css","components/Users/users.module.css","components/common/FormsControls/FormsControls.tsx","serviceWorker.ts","components/Friends/FriendItem/FriendItem.tsx","components/Friends/Friends.tsx","components/Friends/FriendsContainer.tsx","components/navbar/Navbar.tsx","utils/object-helpers.js","redux/users-reducer.ts","components/common/Paginator/Paginator.tsx","assets/images/user.png","components/Users/User.tsx","components/Users/Users.tsx","redux/users-selectors.ts","components/Users/UsersContainer.tsx","components/header/Header.tsx","redux/auth-reducer.ts","components/header/HeaderContainer.tsx","Login/Login.tsx","redux/app-reducer.ts","redux/sidebar-reducer.ts","redux/redux-store.ts","hoc/withSuspense.tsx","App.tsx","index.tsx","components/Friends/Friends.module.css","assets/images/preloader.gif","components/common/Preloader/Preloader.tsx","components/common/FormsControls/FormsControls.module.css","utils/validators/validators.ts","components/common/Paginator/Paginator.module.css","components/header/Header.module.css","redux/profile-reducer.ts"],"names":["ResultCodesEnum","ResultCodeForCaptcha","instance","axios","create","withCredentials","baseURL","headers","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","follow","userId","post","unfollow","delete","getProfile","console","warn","profileAPI","getStatus","updateStatus","status","put","savePhoto","photoFile","formData","FormData","append","saveProfile","profile","authAPI","me","res","login","logout","securityAPI","getCaptchaUrl","SEND_MESSAGE","initialState","messages","id","message","dialogs","name","sendMessageCreator","newMessageBody","type","dialogsReducer","state","action","body","module","exports","FormControl","meta","touched","error","children","hasError","className","styles","formControl","Textarea","props","input","restProps","Input","createField","placeholder","validators","component","text","validate","Boolean","window","location","hostname","match","FriendItem","path","s","item","src","friend","active","to","Friends","sidebarElements","friends","map","d","friendsItems","FriendsContainer","connect","sidebar","Navbar","nav","activeClassName","activeLink","updateObjectInArray","items","itemId","objPropName","newObjProps","u","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_USERS_TOTAL_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","users","totalUsersCount","isFetching","followingInProgress","followSuccess","unfollowSuccess","toggleIsFetching","toggleFollowingProgress","_followUnfollowFlow","apiMethod","actionCreator","dispatch","a","resultCode","usersReducer","followed","count","filter","Paginator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","paginator","onClick","p","cn","selectedPage","pageNumber","e","User","user","photos","small","userPhoto","disabled","some","Users","createSelector","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","this","Preloader","React","Component","compose","bind","page","totalCount","Header","header","loginBlock","isAuth","SET_USER_DATA","GET_CAPTCHA_URL_SUCCESS","email","captchaUrl","setAuthUserData","payload","getCaptchaUrlSuccess","getAuthUserData","meData","Sussess","url","authReducer","HeaderContainer","auth","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","required","undefined","style","formSummaryError","stopSubmit","_error","LoginData","CaptchaIsRequired","length","password","rememberMe","captcha","INITIALIZED_SUCCESS","initialized","appReducer","initilalState","sidebarReducer","rootReducers","combineReducers","profilePage","profileReducer","dialogsPage","formReducer","app","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","__store__","withSuspense","Suspense","fallback","DialogsContainer","lazy","ProfileContainer","App","initializeApp","render","exect","exact","Login","AppContainer","withRouter","TSApp","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","preloader","value","maxLengthCreator","maxLength","ADD_POST","SET_USER_PROFILE","SET_STATUS","DELETE_POST","SAVE_PHOTO_SUCCESS","posts","likesCount","newPostText","addPostActionCreator","setStatus","getUserProfile","file","getState","Promise","reject","newPost","postId"],"mappings":"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","file":"static/js/main.41c6dd79.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport {ProfileType} from \"../types/types\";\r\n\r\nexport type MeResponseType<D = {}> = {\r\n    resultCode: ResultCodesEnum\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport type LoginResponseType<D = {}> = {\r\n    resultCode: ResultCodesEnum | ResultCodeForCaptcha\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum ResultCodesEnum {\r\n    Sussess = 0,\r\n    Error = 1,\r\n}\r\n\r\nexport enum ResultCodeForCaptcha {\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\ntype AuthMeType = {\r\n    id: number\r\n    email: string,\r\n    login: string\r\n}\r\n\r\ntype PhotosType = {\r\n    small: null\r\n    large: null\r\n}\r\n\r\ntype ItemType = {\r\n    name: string\r\n    id: number\r\n    photos: PhotosType\r\n    status: null\r\n    followed: false\r\n}\r\n\r\ntype ResponseUserGetType = {\r\n    items: Array<ItemType>\r\n    totalCount: number\r\n}\r\nexport type ErrorFormikType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: null | string\r\n}\r\n\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        'API-KEY': \"4c7ebabc-af48-45d8-9001-1fb93ae1053e\"\r\n    }\r\n})\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => {\r\n                return response.data\r\n            });\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post<any>(`follow/${userId}`)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete<any>(`follow/${userId}`)\r\n    },\r\n    getProfile(userId: number) {\r\n        console.warn('Obsolete method. Please profileAPI object.')\r\n        return profileAPI.getProfile(userId);\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n\r\n    getProfile(userId: number) {\r\n        return instance.get<any>(`profile/${userId}`)\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get(`profile/status/` + userId);\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put(`profile/status`, {status: status})\r\n    },\r\n    savePhoto(photoFile: any) {\r\n        const formData = new FormData();\r\n        formData.append('image', photoFile);\r\n        return instance.put(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        });\r\n    },\r\n    saveProfile(profile: ProfileType) {\r\n        return instance.put(`profile`, profile)\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<MeResponseType<{ id: number, email: string, login: string }>>('auth/me').then(res => res.data)\r\n    },\r\n    login(data: LoginParamsType) {\r\n        return instance.post<LoginResponseType<{ userId: number }>>('auth/login/', data)\r\n            .then(res => res.data)\r\n    },\r\n    logout() {\r\n        return instance.delete('auth/login');\r\n    },\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get(`security/get-captcha-url`)\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","const SEND_MESSAGE = 'SEND_MESSAGE';\r\n\r\nexport type DialogActionType =\r\n    ReturnType<typeof sendMessageCreator>\r\n\r\nexport type DialogType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nexport type DialogPageType = {\r\n    messages:Array<MessageType>\r\n    dialogs: Array<DialogType>\r\n}\r\n\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nlet initialState = {\r\n    messages: [\r\n        {id: 1, message: 'Hi'},\r\n        {id: 2, message: 'Hi'},\r\n        {id: 3, message: 'Hello'},\r\n        {id: 4, message: 'How are you?'},\r\n        {id: 5, message: 'How old are you?'},] as Array<MessageType>,\r\n    dialogs: [\r\n        {id: 1, name: 'Misha'},\r\n        {id: 2, name: 'Fedya'},\r\n        {id: 3, name: 'Lesha'},\r\n        {id: 4, name: 'Maxim'},\r\n        {id: 5, name: 'Masha'},\r\n        {id: 6, name: 'Katya'}\r\n    ] as Array<DialogType>\r\n};\r\n\r\nconst dialogsReducer = (state = initialState, action: DialogActionType): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case SEND_MESSAGE:\r\n            let body = action.newMessageBody;\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 6, message: body}]\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const sendMessageCreator = (newMessageBody: string) => ({type: SEND_MESSAGE, newMessageBody} as const)\r\n\r\n\r\nexport default dialogsReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__13mrW\",\"item\":\"Navbar_item__1b2os\",\"activeLink\":\"Navbar_activeLink__1s1U0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__1YA3l\"};","import React, {FC} from \"react\";\r\nimport styles from './FormsControls.module.css';\r\nimport {Field, WrappedFieldProps} from 'redux-form'\r\nimport {WrappedFieldMetaProps} from 'redux-form/lib/Field'\r\nimport {FieldValidatorType} from \"../../../utils/validators/validators\";\r\n\r\ntype FormControlParamsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\n\r\nconst FormControl: FC<FormControlParamsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return (<FormControl{...props}><textarea{...input}{...restProps}/></FormControl>)\r\n}\r\n\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return (<FormControl{...props}><input{...input}{...restProps}/></FormControl>)\r\n}\r\n\r\n\r\nexport function createField<FormKeysType extends string>(placeholder: string | undefined, name: FormKeysType, validators: Array<FieldValidatorType>,\r\n                                                         component: React.FC<WrappedFieldProps>, props = {}, text = '') {\r\n    return <div>\r\n        <Field placeholder={placeholder} name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n        />{text}\r\n    </div>\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import s from \"../Friends.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React, {FC} from \"react\";\r\nimport {FriendType} from \"../../../redux/sidebar-reducer\";\r\n\r\ntype PropsType = FriendType\r\n\r\n\r\nconst FriendItem: FC<PropsType> = (props) => {\r\n    let path = '/friends/' + props.id;\r\n    return <div>\r\n        <div className={s.item}>\r\n            <img src='https://image.flaticon.com/icons/png/512/2253/2253998.png'/>\r\n        </div>\r\n        <div className={s.friend + ' ' + s.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default FriendItem;","import React, {FC} from \"react\";\r\nimport FriendItem from \"./FriendItem/FriendItem\";\r\nimport s from \"./Friends.module.css\";\r\nimport {FriendType} from \"../../redux/sidebar-reducer\";\r\n\r\nexport type MapStatePropsType = {\r\n    friends: Array<FriendType>\r\n}\r\ntype PropsType = MapStatePropsType\r\n\r\n\r\nconst Friends: FC<PropsType> = (props) => {\r\n\r\n    let sidebarElements = props.friends.map((d: FriendType) => <FriendItem name={d.name} id={d.id} key={d.id}/>);\r\n\r\n\r\n    return (\r\n        <div className={s.friends}>\r\n            <div className={s.friendsItems}>\r\n                {sidebarElements}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Friends;","import Friends, {MapStatePropsType} from \"./Friends\";\r\nimport React from \"react\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        friends: state.sidebar.friends\r\n    }\r\n}\r\n\r\nconst FriendsContainer = connect<MapStatePropsType, {}, {}, AppStateType>(mapStateToProps, {})(Friends);\r\n\r\n\r\nexport default FriendsContainer;\r\n","import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport FriendsContainer from \"../Friends/FriendsContainer\";\r\n\r\n\r\nfunction Navbar() {\r\n\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to='/profile' activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to='/dialogs' activeClassName={s.activeLink}>Messages</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to='/users' activeClassName={s.activeLink}>Users</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to='/news' activeClassName={s.activeLink}>News</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to='/music' activeClassName={s.activeLink}>Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to='/settings' activeClassName={s.activeLink}>Settings</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to='/friends' activeClassName={s.activeLink}>Friends</NavLink>\r\n                <FriendsContainer/>\r\n            </div>\r\n        </nav>);\r\n};\r\n\r\nexport default Navbar;","export const updateObjectInArray = (items, itemId, objPropName, newObjProps) => {\r\n   return  items.map(u => {\r\n        if (u[objPropName] === itemId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u;\r\n    })\r\n}","import {Dispatch} from \"redux\";\r\nimport {usersAPI} from \"../api/api\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"./redux-store\";\r\nimport {updateObjectInArray} from \"../utils/object-helpers\";\r\nimport {UserType} from \"../types/types\";\r\n\r\nconst FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET_USERS';\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\r\nconst SET_USERS_TOTAL_COUNT = 'SET_USERS_TOTAL_COUNT'\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING'\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS'\r\n\r\n\r\ntype UsersActionTypes =\r\n    | FollowSuccessActionType\r\n    | UnfollowSuccessActionType\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPage>\r\n    | ReturnType<typeof setTotalUsersCount>\r\n    | ReturnType<typeof toggleIsFetching>\r\n    | ReturnType<typeof toggleFollowingProgress>\r\n\r\ntype FollowSuccessActionType = ReturnType<typeof followSuccess>\r\ntype UnfollowSuccessActionType = ReturnType<typeof unfollowSuccess>\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: [] as Array<number> // array of user ids\r\n}\r\n\r\nconst usersReducer = (state = initialState, action: UsersActionTypes): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: true})\r\n            }\r\n\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: false})\r\n            }\r\n        case SET_USERS: {\r\n            return {...state, users: action.users}\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case SET_USERS_TOTAL_COUNT: {\r\n            return {...state, totalUsersCount: action.count}\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const followSuccess = (userId: number) => ({type: FOLLOW, userId}) as const\r\n\r\nexport const unfollowSuccess = (userId: number) => ({type: UNFOLLOW, userId}) as const\r\n\r\nexport const setUsers = (users: Array<UserType>) => ({type: SET_USERS, users}) as const\r\n\r\nexport const setCurrentPage = (currentPage: number) => ({type: SET_CURRENT_PAGE, currentPage}) as const\r\n\r\nexport const setTotalUsersCount = (totalUsersCount: number) => ({\r\n    type: SET_USERS_TOTAL_COUNT,\r\n    count: totalUsersCount\r\n}) as const\r\n\r\nexport const toggleIsFetching = (isFetching: boolean) => ({type: TOGGLE_IS_FETCHING, isFetching}) as const\r\n\r\nexport const toggleFollowingProgress = (isFetching: boolean, userId: number) => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    isFetching,\r\n    userId\r\n}) as const\r\n\r\ntype DispatchType = Dispatch<UsersActionTypes>\r\n\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, UsersActionTypes>\r\n\r\nexport const requestUsers = (page: number, pageSize: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleIsFetching(true));\r\n        dispatch(setCurrentPage(page));\r\n        let data = await usersAPI.getUsers(page, pageSize)\r\n        dispatch(toggleIsFetching(false));\r\n        dispatch(setUsers(data.items));\r\n        dispatch(setTotalUsersCount(data.totalCount));\r\n    }\r\n}\r\nconst _followUnfollowFlow = (userId: number, apiMethod: any, actionCreator: (userId: number) => FollowSuccessActionType | UnfollowSuccessActionType) => {\r\n    return async (dispatch: DispatchType) => {\r\n\r\n        dispatch(toggleFollowingProgress(true, userId));\r\n        let res = await apiMethod(userId)\r\n\r\n        if (res.data.resultCode === 0) {\r\n\r\n            dispatch(actionCreator(userId));\r\n        }\r\n        dispatch(toggleFollowingProgress(false, userId))\r\n    }\r\n}\r\n\r\n\r\nexport const follow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        _followUnfollowFlow(userId, usersAPI.follow.bind(usersAPI), followSuccess)\r\n    }\r\n}\r\nexport const unfollow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        _followUnfollowFlow(userId, usersAPI.unfollow.bind(usersAPI), unfollowSuccess)\r\n    }\r\n}\r\n\r\nexport default usersReducer;","import React, {useState} from \"react\";\r\nimport styles from \"./Paginator.module.css\";\r\nimport cn from 'classnames';\r\n\r\n\r\ntype PropsType = {\r\n    pageSize: number\r\n    totalItemsCount: number\r\n    currentPage?: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    portionSize?: number\r\n}\r\n\r\n\r\nlet Paginator: React.FC<PropsType> = ({\r\n                                          pageSize,\r\n                                          totalItemsCount,\r\n                                          currentPage,\r\n                                          onPageChanged,\r\n                                          portionSize = 10\r\n                                      }) => {\r\n\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize)\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n    return <div className={styles.paginator}>\r\n        {portionNumber > 1 &&\r\n        <button onClick={() => {\r\n            setPortionNumber(portionNumber - 1)\r\n        }}>Prev</button>}\r\n        {pages\r\n            .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n            .map(p => {\r\n                return <span className={cn({\r\n                    [styles.selectedPage]: currentPage === p\r\n                }, styles.pageNumber)}\r\n                             key={p}\r\n                             onClick={(e) => {\r\n                                 onPageChanged(p)\r\n                             }}>{p}</span>\r\n            })}\r\n        {portionCount > portionNumber &&\r\n        <button onClick={() => {\r\n            setPortionNumber(portionNumber + 1)\r\n        }}>NEXT</button>}\r\n    </div>\r\n\r\n}\r\n\r\nexport default Paginator;","export default __webpack_public_path__ + \"static/media/user.32ad9931.png\";","import React from \"react\";\r\nimport styles from \"./users.module.css\";\r\nimport userPhoto from \"../../assets/images/user.png\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {UserType} from \"../../types/types\";\r\n\r\n\r\ntype UserPropsType = {\r\n    key: number\r\n    user: UserType\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    followingInProgress: Array<number>\r\n}\r\n\r\n\r\nexport const User = (props: UserPropsType) => {\r\n    return (\r\n        <div>\r\n        <span>\r\n            <div>\r\n                <NavLink to={'/profile/' + props.user.id}>\r\n                <img src={props.user.photos.small != null ? props.user.photos.small : userPhoto} className={styles.userPhoto}/>\r\n                </NavLink>\r\n\r\n    </div>\r\n    <div>\r\n    {props.user.followed ? <button disabled={props.followingInProgress.some((id: number) => id === props.user.id)}\r\n                          onClick={() => {\r\n                              props.unfollow(props.user.id);\r\n                          }}>\r\n            Unfollow</button>\r\n\r\n        : <button disabled={props.followingInProgress.some(id => id === props.user.id)}\r\n                  onClick={() => {\r\n                      props.follow(props.user.id)\r\n                  }}>\r\n            Follow</button>\r\n    };\r\n    </div>\r\n    </span>\r\n            <span>\r\n    <span>\r\n        <div>{props.user.name}</div>\r\n    <div>{props.user.status}</div>\r\n    </span>\r\n    <span>\r\n    <div>{'u.location.country'}</div>\r\n    <div>{'u.location.city'}</div>\r\n    </span>\r\n    </span>\r\n        </div>)\r\n\r\n\r\n}\r\n\r\nexport default User;","import React from \"react\";\r\n\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport User from \"./User\";\r\nimport {UserType} from \"../../types/types\";\r\n\r\n\r\ntype PropsType = {\r\n    users: Array<UserType>\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    followingInProgress: Array<number>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n}\r\n\r\n\r\nlet Users: React.FC<PropsType> = ({currentPage, onPageChanged, totalUsersCount, pageSize, users, ...props}) => {\r\n    return <div>\r\n        <Paginator currentPage={currentPage} onPageChanged={onPageChanged}\r\n                   totalItemsCount={totalUsersCount} pageSize={pageSize}/>\r\n        <div>\r\n            {\r\n                users.map(u => <User user={u}\r\n                                     key={u.id}\r\n                                     followingInProgress={props.followingInProgress}\r\n                                     follow={props.follow}\r\n                                     unfollow={props.unfollow}\r\n                />)\r\n            }\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Users;","import {AppStateType} from \"./redux-store\";\r\nimport {createSelector} from \"reselect\";\r\n\r\n\r\nconst getUsersSelector = (state: AppStateType) => {\r\n    return state.usersPage.users;\r\n}\r\n\r\n\r\nexport const getUsers = createSelector(getUsersSelector,(users) => {\r\n   return users.filter((u) => true);\r\n})\r\n\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize;\r\n}\r\n\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount;\r\n}\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage;\r\n}\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching;\r\n}\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress;\r\n}\r\n\r\n\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {follow, requestUsers, unfollow} from \"../../redux/users-reducer\";\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers,\r\n} from \"../../redux/users-selectors\";\r\nimport {UserType} from \"../../types/types\";\r\n\r\ntype  MapStatePropsType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n}\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nclass UsersContainer extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        const {currentPage, pageSize} = this.props\r\n        this.props.getUsers(currentPage, pageSize)\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        const {pageSize} = this.props\r\n        this.props.getUsers(pageNumber, pageSize)\r\n    }\r\n\r\n    render() {\r\n\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users totalUsersCount={this.props.totalUsersCount}\r\n                   pageSize={this.props.pageSize}\r\n                   currentPage={this.props.currentPage}\r\n                   onPageChanged={this.onPageChanged}\r\n                   users={this.props.users}\r\n                   follow={this.props.follow}\r\n                   unfollow={this.props.unfollow}\r\n                   followingInProgress={this.props.followingInProgress}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentClass>(\r\n    //<TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState>\r\n    connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(\r\n        mapStateToProps,\r\n        {follow, unfollow, getUsers: requestUsers})\r\n)(UsersContainer)\r\n\r\n","import React, {FC} from 'react';\r\nimport s from './Header.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    isAuth: boolean\r\n    login: null | string\r\n    logout: () => void\r\n}\r\n\r\nconst Header: FC<PropsType> = (props) => {\r\n    return (<header className={s.header}>\r\n        <img\r\n            src='https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcQnNLfpaoxKO2v0-m4gmIhyp_IavIeoa1xuKlgofksobKcJ_gja&usqp=CAU'/>\r\n\r\n        <div className={s.loginBlock}>\r\n            {props.isAuth\r\n                ? <div>{props.login} - <button onClick={props.logout}>Log out</button></div>\r\n                : <NavLink to={'/login'}>Login</NavLink>}\r\n        </div>\r\n    </header>);\r\n};\r\n\r\nexport default Header;\r\n\r\n","import {authAPI, LoginParamsType, ResultCodeForCaptcha, ResultCodesEnum, securityAPI} from \"../api/api\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {Action, Dispatch} from \"redux\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\n\r\nconst SET_USER_DATA = 'samurai-network/auth/SET_USER_DATA';\r\nconst GET_CAPTCHA_URL_SUCCESS = 'samurai-network/auth/GET_CAPTCHA_URL_SUCCESS';\r\n\r\n\r\ntype UsersActionTypes =\r\n    | ReturnType<typeof setAuthUserData>\r\n    | ReturnType<typeof getCaptchaUrlSuccess>\r\n\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\n\r\nlet initialState = {\r\n    userId: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captchaUrl: null as string | null //if null,then captcha is not required\r\n}\r\n\r\nconst authReducer = (state = initialState, action: UsersActionTypes): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n        case GET_CAPTCHA_URL_SUCCESS:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setAuthUserData = (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => (\r\n    {type: SET_USER_DATA, payload: {userId, email, login, isAuth}} as const)\r\n\r\nexport const getCaptchaUrlSuccess = (captchaUrl: string) => (\r\n    {type: GET_CAPTCHA_URL_SUCCESS, payload: {captchaUrl}} as const)\r\n\r\ntype DispatchType = Dispatch<UsersActionTypes>\r\n\r\ntype ThunkType = ThunkAction<void, InitialStateType, unknown, UsersActionTypes>\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    let meData = await authAPI.me()\r\n\r\n    if (meData.resultCode === ResultCodesEnum.Sussess) {\r\n        let {id, email, login} = meData.data;\r\n        dispatch(setAuthUserData(id, email, login, true));\r\n    }\r\n}\r\n\r\n\r\nexport const login = (data: LoginParamsType): ThunkAction<void, InitialStateType, unknown, Action<string>> =>\r\n    async (dispatch) => {\r\n\r\n        dispatch(stopSubmit('login', {_error: 'Common error'}));\r\n\r\n        let LoginData = await authAPI.login(data)\r\n\r\n        if (LoginData.resultCode === ResultCodesEnum.Sussess) {\r\n            // success, get auth LoginData\r\n            dispatch(getAuthUserData())\r\n        } else {\r\n            if (LoginData.resultCode === ResultCodeForCaptcha.CaptchaIsRequired) {\r\n                dispatch(getCaptchaUrl());\r\n            }\r\n            let message = LoginData.messages.length > 0 ? LoginData.messages[0] : 'Some error';\r\n            dispatch(stopSubmit('login', {_error: message}));\r\n        }\r\n    }\r\nexport const getCaptchaUrl = (): ThunkAction<void, InitialStateType, unknown, Action<string>> =>\r\n    async (dispatch) => {\r\n\r\n        const res = await securityAPI.getCaptchaUrl()\r\n        const captchaUrl = res.data.url;\r\n\r\n        dispatch(getCaptchaUrlSuccess(captchaUrl));\r\n    }\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    let res = await authAPI.logout()\r\n\r\n    if (res.data.resultCode === ResultCodesEnum.Sussess) {\r\n        dispatch(setAuthUserData(null, null, null, false));\r\n    }\r\n}\r\n\r\n\r\nexport default authReducer;","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\n\r\ntype HeaderAPIComponentPropsType = {\r\n    isAuth: boolean\r\n    login: null\r\n\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n    login: null | string\r\n}\r\ntype MapDispatchPropsType = {\r\n    logout: () => void\r\n}\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\n\r\nclass HeaderContainer extends React.Component<PropsType> {\r\n\r\n\r\n    render() {\r\n        return <Header {...this.props}/>\r\n    };\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n});\r\nexport default connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps, {logout})(HeaderContainer);\r\n\r\n","import React from 'react';\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, Input} from \"../components/common/FormsControls/FormsControls\";\r\nimport {required} from \"../utils/validators/validators\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport style from './../components/common/FormsControls/FormsControls.module.css'\r\nimport {LoginParamsType} from \"../api/api\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../redux/auth-reducer\";\r\n\r\n\r\ntype LoginFormOwnProps = {\r\n    captchaUrl: string | null\r\n}\r\n\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> = ({\r\n                                                                                                                handleSubmit,\r\n                                                                                                                error,\r\n                                                                                                                captchaUrl\r\n                                                                                                            }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField<LoginFormValuesTypeKeys>('Email', 'email', [required], Input,)}\r\n            {createField<LoginFormValuesTypeKeys>('Password', 'password', [required], Input, {type: 'password'})}\r\n            {createField<LoginFormValuesTypeKeys>(undefined, 'rememberMe', [], Input, {type: 'checkbox'}, 'rememberMe')}\r\n\r\n\r\n            {captchaUrl && <img src={captchaUrl}/>}\r\n            {captchaUrl && createField<LoginFormValuesTypeKeys>('Symbols from image', 'captcha', [required], Input, {})}\r\n\r\n            {error && <div className={style.formSummaryError}>\r\n                {error}\r\n            </div>\r\n            }\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'login'})(LoginForm)\r\n\r\ntype MapStatePropsType = {\r\n    captchaUrl: string | null\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    login: (data: LoginParamsType) => void\r\n}\r\n\r\nexport type LoginFormValuesType = {\r\n    captcha: string\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\ntype LoginFormValuesTypeKeys = Extract<keyof LoginFormValuesType, string>\r\n\r\nconst Login: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        props.login({\r\n            email: formData.email,\r\n            password: formData.password,\r\n            rememberMe: formData.rememberMe,\r\n            captcha: formData.captcha\r\n        });\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\r\n    </div>\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    captchaUrl: state.auth.captchaUrl,\r\n    isAuth: state.auth.isAuth\r\n})\r\nexport default connect(mapStateToProps, {login})(Login);\r\n","import {getAuthUserData} from \"./auth-reducer\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"./redux-store\";\r\nimport {Action} from \"redux\";\r\n\r\n\r\nconst INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS';\r\n\r\n\r\ntype AppActionTypes =\r\n    | ReturnType<typeof initializedSuccess>\r\n\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\n\r\nlet initialState = {\r\n    initialized: false\r\n}\r\n\r\nconst appReducer = (state = initialState, action: AppActionTypes): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const initializedSuccess = () => (\r\n    {type: INITIALIZED_SUCCESS} as const)\r\n\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(getAuthUserData());\r\n    promise.then(() => {\r\n        dispatch(initializedSuccess());\r\n    })\r\n\r\n}\r\n\r\nexport default appReducer;","export type FriendType = {\r\n    id: number\r\n    name: string\r\n}\r\ntype InitilalStateType = typeof initilalState\r\n\r\n\r\nlet initilalState = {\r\n    friends: [\r\n        {id: 1, name: 'Dima'},\r\n        {id: 2, name: 'Ivan'},\r\n        {id: 3, name: 'Tanya'},\r\n    ] as Array<FriendType>\r\n}\r\n\r\nconst sidebarReducer = (state = initilalState): InitilalStateType => {\r\n\r\n\r\n    return state;\r\n}\r\n\r\nexport default sidebarReducer;","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport {reducer as formReducer} from 'redux-form';\r\nimport appReducer from \"./app-reducer\";\r\n\r\nlet rootReducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n\r\n});\r\n\r\n\r\n\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(rootReducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducers>;\r\n\r\n\r\nexport type ReduxStoreType = typeof store;\r\n\r\n\r\nexport default store;\r\n\r\n\r\n// @ts-ignore\r\nwindow.__store__ = store","import React from \"react\";\r\nimport Preloader from \"../components/common/Preloader/Preloader\";\r\n\r\n\r\nexport const withSuspense = (Component: any) => {\r\n    return (props: any) => {\r\n        return <React.Suspense fallback={<Preloader/>}>\r\n            <Component{...props}/>\r\n        </React.Suspense>\r\n    }\r\n}\r\n","import React from \"react\";\nimport './App.css';\nimport Navbar from \"./components/navbar/Navbar\";\nimport {HashRouter, Route, withRouter} from 'react-router-dom';\nimport UsersContainer from \"./components/Users/UsersContainer\";\nimport HeaderContainer from \"./components/header/HeaderContainer\";\nimport Login from \"./Login/Login\";\nimport {connect, Provider} from \"react-redux\";\nimport {compose} from \"redux\";\nimport {initializeApp} from \"./redux/app-reducer\";\nimport store, {AppStateType} from \"./redux/redux-store\";\nimport Preloader from \"./components/common/Preloader/Preloader\";\nimport {withSuspense} from \"./hoc/withSuspense\";\n\n//import DialogsContainer from \"./components/Dialogs/DialogsContainer\";\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'))\n\n//import ProfileContainer from \"./components/profile/ProfileContainer\";\nconst ProfileContainer = React.lazy(() => import('./components/profile/ProfileContainer'))\n\n\ntype AppPropsType = {\n    initializeApp: () => void\n    initialized: boolean\n}\n\n\nclass App extends React.Component<AppPropsType> {\n\n    componentDidMount() {\n        this.props.initializeApp();\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n        return (\n            <div className='app-wrapper'>\n                <HeaderContainer/>\n                <Navbar/>\n                <div className='app-wrapper-content'>\n                    <Route path='/dialogs'\n                           render={withSuspense(DialogsContainer)}/>\n\n                    <Route exect path='/profile/:userId?'\n                           render={withSuspense(ProfileContainer)}/>\n\n                    <Route path='/users'\n                           render={withSuspense(UsersContainer)}/>\n                    <Route exact path={'/login'}\n                           render={withSuspense(Login)}/>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state: AppStateType) => ({\n    initialized: state.app.initialized\n})\n\nlet AppContainer = compose(\n    withRouter,\n    connect(mapStateToProps, {initializeApp}))(App) as React.ComponentClass;\n\nconst TSApp = () => {\n    return <HashRouter>\n        <Provider store={store}>\n            <AppContainer/>\n        </Provider>\n    </HashRouter>\n}\n\nexport default TSApp;","import * as serviceWorker from './serviceWorker';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport TSApp from \"./App\";\n\n\nReactDOM.render(<TSApp/>, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n\n\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Friends_item__1sndB\",\"friends\":\"Friends_friends__10OdD\",\"friendsItems\":\"Friends_friendsItems__llQnB\",\"active\":\"Friends_active__1H4Ew\"};","export default __webpack_public_path__ + \"static/media/preloader.25e656e5.gif\";","import preloader from \"../../../assets/images/preloader.gif\";\r\nimport React from \"react\";\r\n\r\nlet Preloader = () => {\r\n    return <div>\r\n        <img src={preloader}/>\r\n    </div>\r\n}\r\n\r\nexport default Preloader;\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__CVa-0\",\"error\":\"FormsControls_error__3rmwE\",\"formSummaryError\":\"FormsControls_formSummaryError__1rQKo\"};","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    if (value) return undefined;\r\n    return 'Field is required';\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Paginator_selectedPage__Dmynb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3hM2i\",\"loginBlock\":\"Header_loginBlock__W99eA\"};","import {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"./redux-store\";\r\nimport {Action, Dispatch} from \"redux\";\r\nimport {profileAPI, usersAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {PostType, ProfileType} from \"../types/types\";\r\n\r\n\r\nconst ADD_POST = 'ADD_POST';\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\r\nconst SET_STATUS = 'SET_STATUS';\r\nconst DELETE_POST = 'DELETE_POST';\r\nconst SAVE_PHOTO_SUCCESS = 'SAVE_PHOTO_SUCCESS';\r\n\r\ntype ProfileActionTypes =\r\n    | ReturnType<typeof addPostActionCreator>\r\n    | ReturnType<typeof setUserProfile>\r\n    | ReturnType<typeof setStatus>\r\n    | ReturnType<typeof deletePost>\r\n    | ReturnType<typeof savePhotoSuccess>\r\n\r\n\r\n\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: 'Hi, how are you?', likesCount: 12},\r\n        {id: 2, message: 'It\\'s my first post', likesCount: 11},\r\n        {id: 3, message: 'It\\'s my first post', likesCount: 11},\r\n        {id: 4, message: 'It\\'s my first post', likesCount: 11}] as Array<PostType>,\r\n    profile: {} as ProfileType,\r\n    status: '',\r\n    newPostText:''\r\n};\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst profileReducer = (state = initialState, action: ProfileActionTypes): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost = {\r\n                id: 5,\r\n                message: action.newPostText,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n                newPostText:''\r\n            };\r\n        }\r\n\r\n        case SET_STATUS: {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return {...state, profile: action.profile}\r\n        }\r\n        case DELETE_POST: {\r\n            return {...state, posts: state.posts.filter(p => p.id != action.postId)}\r\n        }\r\n        case SAVE_PHOTO_SUCCESS: {\r\n            return {...state, profile: {...state.profile, photos: action.photos}}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addPostActionCreator = (newPostText: string) => ({type: ADD_POST, newPostText} as const)\r\n\r\nexport const setUserProfile = (profile: ProfileType) => ({type: SET_USER_PROFILE, profile} as const)\r\n\r\nexport const setStatus = (status: string) => ({type: SET_STATUS, status} as const)\r\n\r\nexport const deletePost = (postId: number) => ({type: DELETE_POST, postId} as const)\r\n\r\nexport const savePhotoSuccess = (photos: any) => ({type: SAVE_PHOTO_SUCCESS, photos} as const)\r\n\r\n\r\ntype DispatchType = Dispatch<ProfileActionTypes>\r\n\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, ProfileActionTypes>\r\n\r\nexport const getUserProfile = (userId: number): ThunkType => {\r\n\r\n    return async (dispatch: DispatchType) => {\r\n        let response = await usersAPI.getProfile(userId)\r\n        dispatch(setUserProfile(response.data));\r\n\r\n    }\r\n}\r\nexport const getStatus = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        let response = await profileAPI.getStatus(userId)\r\n\r\n        dispatch(setStatus(response.data));\r\n    }\r\n}\r\nexport const updateStatus = (status: string): ThunkType => {\r\n    return async (dispatch) => {\r\n        let response = await profileAPI.updateStatus(status)\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setStatus(status));\r\n        }\r\n    }\r\n}\r\n\r\nexport const savePhoto = (file: any): ThunkType => {\r\n    return async (dispatch: DispatchType) => {\r\n        let response = await profileAPI.savePhoto(file)\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(savePhotoSuccess(response.data.data.photos));\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const saveProfile = (profile: any): ThunkAction<void, AppStateType, unknown, Action<string>> => {\r\n    return async (dispatch, getState: ()=> AppStateType ) => {\r\n        const userId = getState().auth.userId;\r\n        let response = await profileAPI.saveProfile(profile)\r\n        if (response.data.resultCode === 0) {\r\n            if (userId) {\r\n                dispatch(getUserProfile(userId));\r\n            }\r\n        }else {\r\n            dispatch(stopSubmit('edit-profile', {_error: response.data.messages[0]}));\r\n          return Promise.reject(response.data.messages[0]);\r\n        }\r\n    }\r\n}\r\n\r\nexport default profileReducer;"],"sourceRoot":""}