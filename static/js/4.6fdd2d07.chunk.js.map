{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/profile/myPosts/Post/Post.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageFrom.tsx","components/Dialogs/Dialogs.tsx","hoc/WithAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","path","id","className","spost","item","src","s","dialog","active","to","name","Message","message","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","Field","component","validate","required","placeholder","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","isAuth","dialogsItems","values","sendMessage","newMessageBody","mapStateToPropsForRedirect","auth","compose","connect","dispatch","actions","sendMessageCreator","Component","RedirectComponent","this","React"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,oBCAlLD,EAAOC,QAAU,CAAC,KAAO,qB,+GCmBVC,EAZmB,SAACC,GAC/B,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OAAO,gCACH,qBAAKC,UAAWC,IAAMC,KAAtB,SACI,qBAAKC,IAAI,gEAEb,qBAAKH,UAAWI,IAAEC,OAAS,IAAMD,IAAEE,OAAnC,SACI,cAAC,IAAD,CAASC,GAAIT,EAAb,SAAoBD,EAAMW,aCCvBC,EARgB,SAACZ,GAC5B,OAAO,qBAAKG,UAAWI,IAAEC,OAAlB,SAA2BR,EAAMa,W,iCCDtCC,EAAcC,YAAiB,IAoBtBC,cAAwB,CAACC,KAAM,wBAA/BD,EAlB6C,SAAChB,GAGzD,OACI,uBAAMkB,SAAUlB,EAAMmB,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,UAAU,WACVC,SAAU,CAACC,IAAUT,GACrBH,KAAK,iBACLa,YAAY,yBAEvB,8BACI,kDC8BDC,EA7BgB,SAACzB,GAE5B,IAAI0B,EAAQ1B,EAAM2B,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAACC,GAAD,OAAO,cAAC,EAAD,CAAYpB,KAAMoB,EAAEpB,KAAiBT,GAAI6B,EAAE7B,IAAZ6B,EAAE7B,OAC5E8B,EAAmBN,EAAMO,SAASH,KAAI,SAACI,GAAD,OAAO,cAAC,EAAD,CAASrB,QAASqB,EAAErB,SAAcqB,EAAEhC,OAQrF,OAAKF,EAAMmC,OAEP,sBAAKhC,UAAWI,IAAEsB,QAAlB,UACI,qBAAK1B,UAAWI,IAAE6B,aAAlB,SACKR,IAEL,qBAAKzB,UAAWI,IAAE0B,SAAlB,SAEI,8BAAMD,MAEV,cAAC,EAAD,CAAgBd,SAfJ,SAACmB,GACjBrC,EAAMsC,YAAYD,EAAOE,sBAIH,cAAC,IAAD,CAAU7B,GAAI,Y,uDC7BxC8B,EAA6B,SAACd,GAAD,MAA0B,CACvDS,OAAQT,EAAMe,KAAKN,S,SCiBRO,sBACXC,aAhBkB,SAACjB,GACnB,MAAO,CACHC,YAAaD,EAAMC,gBAIF,SAACiB,GACtB,MAAO,CACHN,YAAa,SAACC,GACVK,EAASC,IAAQC,mBAAmBP,UDRhB,SAACQ,GAAmB,IAC1CC,EADyC,uKAGvC,OAAKC,KAAKjD,MAAMmC,OACb,cAACY,EAAD,eAAcE,KAAKjD,QADS,cAAC,IAAD,CAAUU,GAAI,eAHN,GACfwC,IAAMH,WAStC,OAFqCJ,YAAQH,EAARG,CAAoCK,KCM9DN,CAGbjB","file":"static/js/4.6fdd2d07.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__r8pak\",\"dialogsItems\":\"Dialogs_dialogsItems__2kbgs\",\"active\":\"Dialogs_active__3MUyq\",\"messages\":\"Dialogs_messages__3ZXRy\",\"message\":\"Dialogs_message__6vX7A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1Z591\"};","import React, {FC} from \"react\";\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport spost from './../../profile/myPosts/Post/Post.module.css'\r\nimport {DialogType} from \"../../../redux/dialogs-reducer\";\r\n\r\ntype PropsType = DialogType\r\n\r\nconst DialogItem: FC<PropsType> = (props) => {\r\n    let path = '/dialogs/' + props.id;\r\n    return <div>\r\n        <div className={spost.item}>\r\n            <img src='https://image.flaticon.com/icons/png/512/2253/2253998.png'/>\r\n        </div>\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem;\r\n\r\n","import React, {FC} from \"react\";\r\nimport s from './../Dialogs.module.css';\r\nimport {MessageType} from \"../../../redux/dialogs-reducer\";\r\n\r\ntype PropsType = {\r\n    message: string\r\n}\r\n\r\nconst Message: FC<PropsType> = (props) => {\r\n    return <div className={s.dialog}>{props.message}\r\n    </div>\r\n\r\n\r\n}\r\n\r\n\r\nexport default Message;","import React, {FC} from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\n\r\ntype FormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst AddMessageForm: FC<InjectedFormProps<FormDataType>> = (props) => {\r\n\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component='textarea'\r\n                       validate={[required, maxLength50]}\r\n                       name='newMessageBody'\r\n                       placeholder='Enter your message'/>\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<FormDataType>({form: 'dialogAddMessageForm'})(AddMessageForm);","import React, {FC} from \"react\";\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogPageType, DialogType, MessageType} from \"../../redux/dialogs-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport AddMessageForm from \"./AddMessageForm/AddMessageFrom\";\r\n\r\nexport type MapStatePropsType = {\r\n    dialogsPage: DialogPageType\r\n}\r\nexport type MapDispatchPropsType = {\r\n    sendMessage: (newMessageBody: string) => void\r\n}\r\n\r\nexport type OwnPropsType = {\r\n    updateNewMessageBody: (body: string) => void\r\n    isAuth: boolean\r\n}\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType & OwnPropsType\r\n\r\n\r\nconst Dialogs: FC<PropsType> = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs.map((d) => <DialogItem name={d.name} key={d.id} id={d.id}/>);\r\n    let messagesElements = state.messages.map((m) => <Message message={m.message} key={m.id}/>);\r\n\r\n\r\n    let addNewMessage = (values: any) => {\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n\r\n\r\n    if (!props.isAuth) return <Redirect to={'/login'}/>;\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n\r\n                <div>{messagesElements}</div>\r\n            </div>\r\n            <AddMessageForm onSubmit={addNewMessage}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Dialogs;","import {Redirect} from \"react-router-dom\"\r\nimport React from \"react\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport { connect } from \"react-redux\";\r\n\r\n\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Component:any) => {\r\n    class RedirectComponent extends React.Component<any, any> {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to= '/login' />\r\n        return <Component{...this.props}/>\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}\r\n","import React from \"react\";\r\nimport Dialogs, {MapDispatchPropsType, MapStatePropsType, OwnPropsType} from \"./Dialogs\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose, Dispatch} from \"redux\";\r\n\r\nimport {withAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {actions} from \"../../redux/dialogs-reducer\";\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody: string) => {\r\n            dispatch(actions.sendMessageCreator(newMessageBody));\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.FunctionComponent>(\r\n    connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);"],"sourceRoot":""}