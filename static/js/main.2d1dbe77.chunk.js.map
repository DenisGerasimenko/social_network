{"version":3,"sources":["assets/images/IMG-cc6fce77d19c2c7cdaacc19191b9f671-V.jpg","components/navbar/Navbar.module.css","redux/dialogs-reducer.ts","components/Users/users.module.css","api/api.ts","serviceWorker.ts","components/Friends/FriendItem/FriendItem.tsx","components/Friends/Friends.tsx","components/Friends/FriendsContainer.tsx","components/navbar/Navbar.tsx","utils/object-helpers.js","redux/users-reducer.ts","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/Users.tsx","redux/users-selectors.ts","components/Users/UsersContainer.tsx","components/header/Header.tsx","redux/auth-reducer.ts","components/header/HeaderContainer.tsx","Login/Login.tsx","redux/app-reducer.ts","redux/sidebar-reducer.ts","redux/redux-store.ts","hoc/withSuspense.tsx","App.tsx","index.tsx","components/Friends/Friends.module.css","components/common/FormsControls/FormsControls.tsx","assets/images/preloader.gif","components/common/Preloader/Preloader.tsx","components/common/FormsControls/FormsControls.module.css","components/common/Paginator/Paginator.module.css","utils/validators/validators.ts","components/header/Header.module.css","redux/profile-reducer.ts"],"names":["module","exports","SEND_MESSAGE","initialState","messages","id","message","dialogs","name","sendMessageCreator","newMessageBody","type","dialogsReducer","state","action","body","instance","axios","create","withCredentials","baseURL","headers","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","follow","userId","post","unfollow","delete","getProfile","console","warn","profileAPI","getStatus","updateStatus","status","put","authAPI","me","login","logout","Boolean","window","location","hostname","match","FriendItem","props","path","className","s","item","src","friend","active","to","Friends","sidebarElements","friends","map","d","friendsItems","FriendsContainer","connect","sidebar","Navbar","nav","activeClassName","activeLink","updateObjectInArray","items","itemId","objPropName","newObjProps","u","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_USERS_TOTAL_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","users","totalUsersCount","isFetching","followingInProgress","followSuccess","unfollowSuccess","setCurrentPage","toggleIsFetching","toggleFollowingProgress","followUnfollowFlow","apiMethod","actionCreator","dispatch","a","resultCode","usersReducer","followed","count","filter","Paginator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","styles","paginator","onClick","p","cn","selectedPage","pageNumber","e","User","user","photos","small","userPhoto","disabled","some","Users","createSelector","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","this","Preloader","React","Component","compose","bind","page","totalCount","Header","header","loginBlock","isAuth","SET_USER_DATA","email","setAuthUserData","payload","getAuthUserData","authReducer","HeaderContainer","auth","LoginReduxForm","reduxForm","form","handleSubmit","error","onSubmit","createField","required","Input","style","formSummaryError","stopSubmit","_error","res","length","formData","password","rememberMe","INITIALIZED_SUCCESS","initialized","appReducer","initilalState","sidebarReducer","reducers","combineReducers","profilePage","profileReducer","dialogsPage","formReducer","app","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","__store__","withSuspense","Suspense","fallback","DialogsContainer","lazy","ProfileContainer","App","initializeApp","render","exect","Login","AppContainer","withRouter","TSApp","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","FormControl","meta","touched","children","hasError","formControl","Textarea","input","restProps","placeholder","validators","component","text","validate","preloader","value","maxLengthCreator","maxLength","ADD_POST","SET_USER_PROFILE","SET_STATUS","DELETE_POST","posts","likesCount","profile","addPostActionCreator","newPostText","setStatus","getUserProfile","newPost","postId"],"mappings":"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","file":"static/js/main.2d1dbe77.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/IMG-cc6fce77d19c2c7cdaacc19191b9f671-V.3fb08792.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__13mrW\",\"item\":\"Navbar_item__1b2os\",\"activeLink\":\"Navbar_activeLink__1s1U0\"};","const SEND_MESSAGE = 'SEND_MESSAGE';\r\n\r\nexport type DialogActionType =\r\n    ReturnType<typeof sendMessageCreator>\r\n\r\n\r\ntype MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\ntype DialogType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type DialogPageType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n\r\n}\r\n\r\nlet initialState = {\r\n    messages: [\r\n        {id: 1, message: 'Hi'},\r\n        {id: 2, message: 'How is your IT-kamasutra'},\r\n        {id: 3, message: 'Yo'},\r\n        {id: 4, message: 'Yo'},\r\n        {id: 5, message: 'Yo'},],\r\n    dialogs: [\r\n        {id: 1, name: 'Dimych'},\r\n        {id: 2, name: 'Andrew'},\r\n        {id: 3, name: 'Sveta'},\r\n        {id: 4, name: 'Sasha'},\r\n        {id: 5, name: 'Victor'},\r\n        {id: 6, name: 'Valera'}\r\n        ]\r\n};\r\n\r\nconst dialogsReducer = (state = initialState, action: DialogActionType): DialogPageType => {\r\n    switch (action.type) {\r\n\r\n        case SEND_MESSAGE:\r\n            let body = action.newMessageBody;\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 6, message: body}]\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const sendMessageCreator = (newMessageBody:string) => ({type: SEND_MESSAGE,newMessageBody}as const)\r\n\r\n\r\nexport default dialogsReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__1YA3l\"};","import axios from \"axios\";\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\ntype AuthMeType = {\r\n    id: number\r\n    email: string,\r\n    login: string\r\n}\r\n\r\ntype PhotosType = {\r\n    small: null\r\n    large: null\r\n}\r\n\r\ntype ItemType = {\r\n    name: string\r\n    id: number\r\n    photos: PhotosType\r\n    status: null\r\n    followed: false\r\n}\r\n\r\ntype ResponseUserGetType = {\r\n    items: Array<ItemType>\r\n    totalCount: number\r\n}\r\nexport type ErrorFormikType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        'API-KEY': \"4c7ebabc-af48-45d8-9001-1fb93ae1053e\"\r\n    }\r\n})\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => {\r\n                return response.data\r\n            });\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post<any>(`follow/${userId}`)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete<any>(`follow/${userId}`)\r\n    },\r\n    getProfile(userId: number) {\r\n        console.warn('Obsolete method. Please profileAPI object.')\r\n        return profileAPI.getProfile(userId);\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n\r\n    getProfile(userId: number) {\r\n        return instance.get<any>(`profile/${userId}`)\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get(`profile/status/` + userId);\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put(`profile/status`, {status: status})\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<any>('auth/me')\r\n    },\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{ userId?: number }>>('auth/login/', data);\r\n    },\r\n    logout(){\r\n        return instance.delete('auth/login');\r\n    },\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import s from \"../Friends.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\nconst FriendItem = (props: any) => {\r\n    let path = '/friends/' + props.id;\r\n    return <div>\r\n        <div className={s.item}>\r\n            <img src='https://image.flaticon.com/icons/png/512/2253/2253998.png'/>\r\n        </div>\r\n        <div className={s.friend + ' ' + s.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default FriendItem;","import React from \"react\";\r\nimport FriendItem from \"./FriendItem/FriendItem\";\r\nimport s from \"./Friends.module.css\";\r\nimport {FriendType} from \"../../redux/sidebar-reducer\";\r\n\r\n\r\ntype FriendsPropsType = {\r\n    friends: Array<FriendType>\r\n}\r\n\r\nconst Friends = (props: FriendsPropsType) => {\r\n\r\n    let sidebarElements = props.friends.map((d:any ) => <FriendItem name={d.name} id={d.id} key={d.id}/>);\r\n\r\n\r\n    return (\r\n        <div className={s.friends}>\r\n            <div className={s.friendsItems}>\r\n                {sidebarElements}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Friends;","import Friends from \"./Friends\";\r\nimport React from \"react\";\r\nimport {ReduxStoreType, StateType} from \"../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nlet mapStateToProps = (state: StateType) => {\r\n    return {\r\n        friends: state.sidebar.friends\r\n    }\r\n}\r\n\r\nconst FriendsContainer = connect(mapStateToProps, {})(Friends);\r\n\r\n\r\nexport default FriendsContainer;\r\n","import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nimport {ReduxStoreType} from \"../../redux/redux-store\";\r\nimport FriendsContainer from \"../Friends/FriendsContainer\";\r\n\r\n\r\n\r\n\r\nfunction Navbar() {\r\n\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to='/profile' activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to='/dialogs' activeClassName={s.activeLink}>Messages</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to='/users' activeClassName={s.activeLink}>Users</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to='/news' activeClassName={s.activeLink}>News</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to='/music' activeClassName={s.activeLink}>Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to='/settings' activeClassName={s.activeLink}>Settings</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to='/friends' activeClassName={s.activeLink}>Friends</NavLink>\r\n                <FriendsContainer/>\r\n            </div>\r\n        </nav>);\r\n};\r\n\r\nexport default Navbar;","export const updateObjectInArray = (items, itemId, objPropName, newObjProps) => {\r\n   return  items.map(u => {\r\n        if (u[objPropName] === itemId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u;\r\n    })\r\n}","import {Action, Dispatch} from \"redux\";\r\nimport {usersAPI} from \"../api/api\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {StateType} from \"./redux-store\";\r\nimport {updateObjectInArray} from \"../utils/object-helpers\";\r\n\r\nconst FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET_USERS';\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\r\nconst SET_USERS_TOTAL_COUNT = 'SET_USERS_TOTAL_COUNT'\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING'\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS'\r\n\r\n\r\ntype UsersActionTypes =\r\n    | ReturnType<typeof followSuccess>\r\n    | ReturnType<typeof unfollowSuccess>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPage>\r\n    | ReturnType<typeof setTotalUsersCount>\r\n    | ReturnType<typeof toggleIsFetching>\r\n    | ReturnType<typeof toggleFollowingProgress>\r\n\r\n\r\nexport type UserType = {\r\n    id: number\r\n    followed: boolean\r\n    name: string\r\n    status: string | null\r\n    photos: {\r\n        small: string | null\r\n        large: string | null\r\n    }\r\n\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: [] as Array<number>\r\n}\r\n\r\nconst usersReducer = (state = initialState, action: UsersActionTypes): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: true})\r\n            }\r\n\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: false})\r\n            }\r\n        case SET_USERS: {\r\n            return {...state, users: action.users}\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case SET_USERS_TOTAL_COUNT: {\r\n            return {...state, totalUsersCount: action.count}\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const followSuccess = (userId: number) => ({type: FOLLOW, userId}) as const\r\n\r\nexport const unfollowSuccess = (userId: number) => ({type: UNFOLLOW, userId}) as const\r\n\r\nexport const setUsers = (users: Array<UserType>) => ({type: SET_USERS, users}) as const\r\n\r\nexport const setCurrentPage = (currentPage: number) => ({type: SET_CURRENT_PAGE, currentPage}) as const\r\n\r\nexport const setTotalUsersCount = (totalUsersCount: number) => ({\r\n    type: SET_USERS_TOTAL_COUNT,\r\n    count: totalUsersCount\r\n}) as const\r\n\r\nexport const toggleIsFetching = (isFetching: boolean) => ({type: TOGGLE_IS_FETCHING, isFetching}) as const\r\n\r\nexport const toggleFollowingProgress = (isFetching: boolean, userId: number) => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    isFetching,\r\n    userId\r\n}) as const\r\n\r\ntype DispatchType = Dispatch<UsersActionTypes>\r\n\r\nexport const requestUsers = (page: number, pageSize: number): ThunkAction<void, StateType, unknown, Action<string>> => {\r\n    return async (dispatch: DispatchType) => {\r\n        dispatch(toggleIsFetching(true));\r\n        dispatch(setCurrentPage(page));\r\n        let data = await usersAPI.getUsers(page, pageSize)\r\n        dispatch(toggleIsFetching(false));\r\n        dispatch(setUsers(data.items));\r\n        dispatch(setTotalUsersCount(data.totalCount));\r\n    }\r\n}\r\nconst followUnfollowFlow = (userId: number, apiMethod: any, actionCreator: any): ThunkAction<void, StateType, unknown, Action<string>> => {\r\n    return async (dispatch: DispatchType) => {\r\n\r\n        dispatch(toggleFollowingProgress(true, userId));\r\n        let res = await apiMethod(userId)\r\n\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(actionCreator(userId));\r\n        }\r\n        dispatch(toggleFollowingProgress(false, userId))\r\n    }\r\n}\r\n\r\nexport const follow = (userId: number): ThunkAction<void, StateType, unknown, Action<string>> => {\r\n    return async (dispatch: DispatchType) => {\r\n        followUnfollowFlow(userId, usersAPI.follow.bind(usersAPI), followSuccess)\r\n    }\r\n}\r\nexport const unfollow = (userId: number): ThunkAction<void, StateType, unknown, Action<string>> => {\r\n    return async (dispatch: DispatchType) => {\r\n        followUnfollowFlow(userId, usersAPI.unfollow.bind(usersAPI), unfollowSuccess)\r\n    }\r\n}\r\n\r\nexport default usersReducer;","import React, {useState} from \"react\";\r\nimport styles from \"./Paginator.module.css\";\r\nimport cn from 'classnames';\r\n\r\n\r\ntype PaginatorProps = {\r\n    pageSize: number\r\n    totalItemsCount: number\r\n    currentPage?: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    portionSize?: number\r\n}\r\n\r\n\r\nlet Paginator = (props: PaginatorProps) => {\r\n\r\n    let {pageSize, totalItemsCount, currentPage, onPageChanged, portionSize = 10} = props\r\n\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize)\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n    return <div className={styles.paginator}>\r\n        {portionNumber > 1 &&\r\n        <button onClick={() => {\r\n            setPortionNumber(portionNumber - 1)\r\n        }}>Prev</button>}\r\n        {pages\r\n            .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n            .map(p => {\r\n                return <span className={cn({\r\n                    [styles.selectedPage]: currentPage === p\r\n                }, styles.pageNumber)}\r\n                             key={p}\r\n                             onClick={(e) => {\r\n                                 onPageChanged(p)\r\n                             }}>{p}</span>\r\n            })}\r\n        {portionCount > portionNumber &&\r\n        <button onClick={() => {\r\n            setPortionNumber(portionNumber + 1)\r\n        }}>NEXT</button>}\r\n    </div>\r\n\r\n}\r\n\r\nexport default Paginator;","import React from \"react\";\r\nimport styles from \"./users.module.css\";\r\nimport userPhoto from \"../../assets/images/IMG-cc6fce77d19c2c7cdaacc19191b9f671-V.jpg\";\r\nimport {UserType} from \"../../redux/users-reducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\ntype UserPropsType = {\r\n    key: number\r\n    user: UserType\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    followingInProgress: Array<number>\r\n}\r\n\r\n\r\nexport const User = (props: UserPropsType) => {\r\n    return (\r\n        <div>\r\n        <span>\r\n            <div>\r\n                <NavLink to={'/profile/' + props.user.id}>\r\n                <img src={props.user.photos.small != null ? props.user.photos.small : userPhoto} className={styles.userPhoto}/>\r\n                </NavLink>\r\n\r\n    </div>\r\n    <div>\r\n    {props.user.followed ? <button disabled={props.followingInProgress.some((id: number) => id === props.user.id)}\r\n                          onClick={() => {\r\n                              props.unfollow(props.user.id);\r\n                          }}>\r\n            Unfollow</button>\r\n\r\n        : <button disabled={props.followingInProgress.some(id => id === props.user.id)}\r\n                  onClick={() => {\r\n                      props.follow(props.user.id)\r\n                  }}>\r\n            Follow</button>\r\n    };\r\n    </div>\r\n    </span>\r\n            <span>\r\n    <span>\r\n        <div>{props.user.name}</div>\r\n    <div>{props.user.status}</div>\r\n    </span>\r\n    <span>\r\n    <div>{'u.location.country'}</div>\r\n    <div>{'u.location.city'}</div>\r\n    </span>\r\n    </span>\r\n        </div>)\r\n\r\n\r\n}\r\n\r\nexport default User;","import React from \"react\";\r\nimport {UserType} from \"../../redux/users-reducer\";\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport User from \"./User\";\r\n\r\n\r\ntype UsersPropsType = {\r\n    users: Array<UserType>\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    followingInProgress: Array<number>\r\n    pageSize: number\r\n    totalItemsCount: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n}\r\n\r\n\r\nlet Users = (props: UsersPropsType) => {\r\n    return <div>\r\n        <Paginator currentPage={props.currentPage} onPageChanged={props.onPageChanged}\r\n                   totalItemsCount={props.totalItemsCount} pageSize={props.pageSize} />\r\n        <div>\r\n            {\r\n                props.users.map(u => <User user={u}\r\n                                           key={u.id}\r\n                                           followingInProgress={props.followingInProgress}\r\n                                           follow={props.follow}\r\n                                           unfollow={props.unfollow}\r\n                />)\r\n            }\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Users;","import {StateType} from \"./redux-store\";\r\nimport {createSelector} from \"reselect\";\r\n\r\n\r\nconst getUsersSelector = (state: StateType) => {\r\n    return state.usersPage.users;\r\n}\r\n\r\n\r\nexport const getUsers = createSelector(getUsersSelector,(users) => {\r\n   return users.filter((u) => true);\r\n})\r\n\r\n\r\nexport const getPageSize = (state: StateType) => {\r\n    return state.usersPage.pageSize;\r\n}\r\n\r\nexport const getTotalUsersCount = (state: StateType) => {\r\n    return state.usersPage.totalUsersCount;\r\n}\r\n\r\nexport const getCurrentPage = (state: StateType) => {\r\n    return state.usersPage.currentPage;\r\n}\r\nexport const getIsFetching = (state: StateType) => {\r\n    return state.usersPage.isFetching;\r\n}\r\nexport const getFollowingInProgress = (state: StateType) => {\r\n    return state.usersPage.followingInProgress;\r\n}\r\n\r\n\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../../redux/redux-store\";\r\nimport {follow, requestUsers, setCurrentPage, unfollow, UserType} from \"../../redux/users-reducer\";\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers,\r\n} from \"../../redux/users-selectors\";\r\n\r\n\r\ntype UsersAPIComponentPropsType = {\r\n    users: Array<UserType>\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    setCurrentPage: (pageNumber: number) => void\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n}\r\n\r\nclass UsersContainer extends React.Component<UsersAPIComponentPropsType> {\r\n    componentDidMount() {\r\n        const {currentPage, pageSize} = this.props\r\n        this.props.getUsers(currentPage, pageSize)\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        const {pageSize} = this.props\r\n        this.props.getUsers(pageNumber, pageSize)\r\n    }\r\n\r\n    render() {\r\n\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users totalItemsCount={this.props.totalUsersCount}\r\n                   pageSize={this.props.pageSize}\r\n                   currentPage={this.props.currentPage}\r\n                   onPageChanged={this.onPageChanged}\r\n                   users={this.props.users}\r\n                   follow={this.props.follow}\r\n                   unfollow={this.props.unfollow}\r\n                   followingInProgress={this.props.followingInProgress}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: StateType) => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n}\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps,\r\n        {follow, unfollow, setCurrentPage, getUsers: requestUsers})\r\n)(UsersContainer)\r\n\r\n","import React from 'react';\r\nimport s from './Header.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype HeaderPropsType = {\r\n    isAuth: boolean\r\n    login: null\r\n    logout: () => void\r\n}\r\n\r\nfunction Header(props: HeaderPropsType) {\r\n    return (<header className={s.header}>\r\n        <img\r\n            src='https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcQnNLfpaoxKO2v0-m4gmIhyp_IavIeoa1xuKlgofksobKcJ_gja&usqp=CAU'/>\r\n\r\n        <div className={s.loginBlock}>\r\n            {props.isAuth\r\n                ? <div>{props.login} - <button onClick={props.logout}>Log out</button></div>\r\n                : <NavLink to={'/login'}>Login</NavLink>}\r\n        </div>\r\n    </header>);\r\n};\r\n\r\nexport default Header;\r\n\r\n","import {authAPI, LoginParamsType} from \"../api/api\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {Action} from \"redux\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\n\r\nconst SET_USER_DATA = 'samurai-network/auth/SET_USER_DATA';\r\n\r\n\r\ntype UsersActionTypes =\r\n    | ReturnType<typeof setAuthUserData>\r\n\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\n\r\nlet initialState = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false\r\n}\r\n\r\nconst authReducer = (state = initialState, action: UsersActionTypes): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setAuthUserData = (userId: null, email: null, login: null, isAuth: boolean) => (\r\n    {type: SET_USER_DATA, payload: {userId, email, login, isAuth}} as const)\r\n\r\n\r\nexport const getAuthUserData = (): ThunkAction<void, InitialStateType, unknown, Action<string>> => async (dispatch) => {\r\n    let response = await authAPI.me()\r\n\r\n            if (response.data.resultCode === 0) {\r\n                let {id, email, login} = response.data.data;\r\n                dispatch(setAuthUserData(id, email, login, true));\r\n            }\r\n }\r\n\r\n\r\nexport const login = (data: LoginParamsType): ThunkAction<void, InitialStateType, unknown, Action<string>> => async (dispatch) => {\r\n\r\n    dispatch(stopSubmit('login', {_error: 'Common error'}));\r\n\r\n    let res = await authAPI.login(data)\r\n\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(getAuthUserData())\r\n            } else {\r\n                let message = res.data.messages.length > 0 ? res.data.messages[0] : 'Some error';\r\n                dispatch(stopSubmit('login', {_error: message}));\r\n            }\r\n\r\n}\r\n\r\nexport const logout = (): ThunkAction<void, InitialStateType, unknown, Action<string>> => async (dispatch) => {\r\n    let res= await authAPI.logout()\r\n\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAuthUserData(null, null, null, false));\r\n            }\r\n}\r\n\r\n\r\nexport default authReducer;","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../../redux/redux-store\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\n\r\ntype HeaderAPIComponentPropsType = {\r\n    isAuth: boolean\r\n    login: null\r\n    logout: () => void\r\n}\r\n\r\nclass HeaderContainer extends React.Component<HeaderAPIComponentPropsType> {\r\n\r\n\r\n\r\n    render() {\r\n        return <Header {...this.props}/>\r\n    };\r\n}\r\n\r\nconst mapStateToProps = (state: StateType) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n});\r\nexport default connect(mapStateToProps, {logout})(HeaderContainer);\r\n\r\n","import React from 'react';\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, Input} from \"../components/common/FormsControls/FormsControls\";\r\nimport {required} from \"../utils/validators/validators\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport style from './../components/common/FormsControls/FormsControls.module.css'\r\nimport {LoginParamsType} from \"../api/api\";\r\nimport {StateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../redux/auth-reducer\";\r\n\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = ({handleSubmit, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField('Email', 'email', [required], Input,)}\r\n            {createField('Password', 'password', [required], Input, {type: 'password'})}\r\n            {createField(null, 'rememberMe', [], Input, {type: 'checkbox'}, 'rememberMe')}\r\n\r\n            {error && <div className={style.formSummaryError}>\r\n                {error}\r\n            </div>\r\n            }\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm)\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    login: (data: LoginParamsType) => void\r\n}\r\ntype LoginPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst Login = (props: LoginPropsType) => {\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.login({email: formData.email, password: formData.password, rememberMe: formData.rememberMe});\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit}/>\r\n    </div>\r\n}\r\nconst mapStateToProps = (state: StateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\nexport default connect(mapStateToProps, {login})(Login);\r\n","import {Action, Dispatch} from \"redux\";\r\nimport {authAPI, LoginParamsType, usersAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {getAuthUserData} from \"./auth-reducer\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\n\r\n\r\nconst INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS';\r\n\r\n\r\ntype AppActionTypes =\r\n    | ReturnType<typeof initializedSuccess>\r\n\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\n\r\nlet initialState = {\r\n    initialized: false,\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false\r\n\r\n}\r\n\r\nconst appReducer = (state = initialState, action: AppActionTypes): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const initializedSuccess = () => (\r\n    {type: INITIALIZED_SUCCESS} as const)\r\n\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType,\r\n    InitialStateType,\r\n    unknown,\r\n    Action<string>>\r\n\r\nexport const initializeApp = () =>  (dispatch: any) => {\r\n\r\n    let promise = dispatch(getAuthUserData());\r\n    promise.then(() => {\r\n        dispatch(initializedSuccess());\r\n    })\r\n}\r\n\r\n\r\nexport default appReducer;","\r\n\r\nexport type FriendType = {\r\n    id: number,\r\n    name: string\r\n}\r\ntype SidebarType = {\r\n    friends: Array<FriendType>\r\n}\r\n\r\nlet initilalState = {\r\n    friends: [\r\n        {id: 1, name: 'Dimych'},\r\n        {id: 2, name: 'Andrew'},\r\n        {id: 3, name: 'Sveta'},]\r\n}\r\n\r\nconst sidebarReducer = (state = initilalState):SidebarType => {\r\n\r\n\r\n    return state;\r\n}\r\n\r\nexport default sidebarReducer;","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport {reducer as formReducer} from 'redux-form';\r\nimport appReducer from \"./app-reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n\r\n});\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\nexport type StateType = ReturnType<typeof reducers>;\r\n\r\n\r\nexport type ReduxStoreType = typeof store;\r\n\r\n\r\nexport default store;\r\n\r\n\r\n// @ts-ignore\r\nwindow.__store__ = store","import React from \"react\";\r\nimport Preloader from \"../components/common/Preloader/Preloader\";\r\n\r\n\r\nexport const withSuspense = (Component: any) => {\r\n    return (props: any) => {\r\n        return <React.Suspense fallback={<Preloader/>}>\r\n            <Component{...props}/>\r\n        </React.Suspense>\r\n    }\r\n}\r\n","import React from \"react\";\nimport './App.css';\nimport Navbar from \"./components/navbar/Navbar\";\nimport {HashRouter, Route, withRouter} from 'react-router-dom';\nimport UsersContainer from \"./components/Users/UsersContainer\";\nimport HeaderContainer from \"./components/header/HeaderContainer\";\nimport Login from \"./Login/Login\";\nimport {connect, Provider} from \"react-redux\";\nimport {compose} from \"redux\";\nimport {initializeApp} from \"./redux/app-reducer\";\nimport store, {StateType} from \"./redux/redux-store\";\nimport Preloader from \"./components/common/Preloader/Preloader\";\nimport {withSuspense} from \"./hoc/withSuspense\";\n\n//import DialogsContainer from \"./components/Dialogs/DialogsContainer\";\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'))\n\n//import ProfileContainer from \"./components/profile/ProfileContainer\";\nconst ProfileContainer = React.lazy(() => import('./components/profile/ProfileContainer'))\n\n\ntype AppPropsType = {\n    initializeApp: () => void\n    initialized: boolean\n}\n\n\nclass App extends React.Component<AppPropsType> {\n\n    componentDidMount() {\n        this.props.initializeApp();\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n        return (\n            <div className='app-wrapper'>\n                <HeaderContainer/>\n                <Navbar/>\n                <div className='app-wrapper-content'>\n                    <Route path='/dialogs'\n                           render={withSuspense(DialogsContainer)}/>\n\n                    <Route exect path='/profile/:userId?'\n                           render={withSuspense(ProfileContainer)}/>\n\n                    <Route path='/users'\n                           render={withSuspense(UsersContainer)}/>\n                    <Route exect path={'/login'}\n                           render={withSuspense(Login)}/>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state: StateType) => ({\n    initialized: state.app.initialized\n})\n\nlet AppContainer = compose(\n    withRouter,\n    connect(mapStateToProps, {initializeApp}))(App) as React.ComponentClass;\n\nconst TSApp = () => {\n    return <HashRouter>\n        <Provider store={store}>\n            <AppContainer/>\n        </Provider>\n    </HashRouter>\n}\n\nexport default TSApp;","import * as serviceWorker from './serviceWorker';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport TSApp from \"./App\";\n\n\nReactDOM.render(<TSApp/>, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n\n\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Friends_item__1sndB\",\"friends\":\"Friends_friends__10OdD\",\"friendsItems\":\"Friends_friendsItems__llQnB\",\"active\":\"Friends_active__1H4Ew\"};","import React, {FC} from \"react\";\r\nimport styles from './FormsControls.module.css';\r\nimport {Field, WrappedFieldProps} from 'redux-form'\r\nimport {WrappedFieldMetaProps} from 'redux-form/lib/Field'\r\n\r\ntype FromControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: FC<FromControlPropsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const Textarea = (props: WrappedFieldProps) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return (<FormControl{...props}><textarea{...input}{...restProps}/></FormControl>)\r\n}\r\n\r\n\r\nexport const Input = (props: WrappedFieldProps) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return (<FormControl{...props}><input{...input}{...restProps}/></FormControl>)\r\n}\r\n\r\nexport const createField = (placeholder: string | null, name: string, validators: any, component: any, props = {}, text = '') => (\r\n    <div>\r\n        <Field placeholder={placeholder} name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n        />{text}\r\n    </div>\r\n)","export default __webpack_public_path__ + \"static/media/preloader.25e656e5.gif\";","import preloader from \"../../../assets/images/preloader.gif\";\r\nimport React from \"react\";\r\n\r\nlet Preloader = () => {\r\n    return <div>\r\n        <img src={preloader}/>\r\n    </div>\r\n}\r\n\r\nexport default Preloader;\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__CVa-0\",\"error\":\"FormsControls_error__3rmwE\",\"formSummaryError\":\"FormsControls_formSummaryError__1rQKo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Paginator_selectedPage__Dmynb\"};","export const required = (value: string) => {\r\n    if (value) return undefined;\r\n    return 'Field is required';\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3hM2i\",\"loginBlock\":\"Header_loginBlock__W99eA\"};","import {ThunkAction} from \"redux-thunk\";\r\nimport {StateType} from \"./redux-store\";\r\nimport {Action, Dispatch} from \"redux\";\r\nimport {profileAPI, usersAPI} from \"../api/api\";\r\n\r\n\r\nconst ADD_POST = 'ADD_POST';\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\r\nconst SET_STATUS = 'SET_STATUS';\r\nconst DELETE_POST = 'DELETE_POST'\r\n\r\ntype ProfileActionTypes =\r\n    | ReturnType<typeof addPostActionCreator>\r\n    | ReturnType<typeof setUserProfile>\r\n    | ReturnType<typeof setStatus>\r\n    | ReturnType<typeof deletePost>\r\n\r\ntype ContactsType = {\r\n    \"facebook\": string\r\n    \"website\": null\r\n    \"vk\": string\r\n    \"twitter\": string\r\n    \"instagram\": string\r\n    \"youtube\": null,\r\n    \"github\": string\r\n    \"mainLink\": null\r\n}\r\ntype PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\n\r\nexport type ProfileType = {\r\n    \"aboutMe\": string\r\n    \"contacts\": ContactsType\r\n    \"lookingForAJob\": boolean\r\n    \"lookingForAJobDescription\": string\r\n    \"fullName\": string\r\n    \"userId\": number\r\n    \"photos\": PhotosType\r\n}\r\n\r\nexport type PostType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\ntype ProfilePageType = {\r\n    posts: Array<PostType>\r\n\r\n}\r\n\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: 'Hi, how are you?', likesCount: 12},\r\n        {id: 2, message: 'It\\'s my first post', likesCount: 11},\r\n        {id: 3, message: 'It\\'s my first post', likesCount: 11},\r\n        {id: 4, message: 'It\\'s my first post', likesCount: 11}],\r\n    profile: [] as Array<ProfileType>,\r\n    status: ''\r\n};\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst profileReducer = (state = initialState, action: ProfileActionTypes): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost = {\r\n                id: 5,\r\n                message: action.newPostText,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost]\r\n            };\r\n        }\r\n\r\n        case SET_STATUS: {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return {...state, profile: action.profile}\r\n        }\r\n        case DELETE_POST: {\r\n            return {...state, posts: state.posts.filter(p => p.id != action.postId)}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addPostActionCreator = (newPostText: string) => ({type: ADD_POST, newPostText} as const)\r\n\r\nexport const setUserProfile = (profile: Array<ProfileType>) => ({type: SET_USER_PROFILE, profile} as const)\r\n\r\nexport const setStatus = (status: string) => ({type: SET_STATUS, status} as const)\r\n\r\nexport const deletePost = (postId: number) => ({type: DELETE_POST, postId} as const)\r\n\r\n\r\ntype DispatchType = Dispatch<ProfileActionTypes>\r\n\r\nexport const getUserProfile = (userId: number): ThunkAction<void, StateType, unknown, Action<string>> => {\r\n    return async (dispatch: DispatchType) => {\r\n        let response = await usersAPI.getProfile(userId)\r\n        dispatch(setUserProfile(response.data));\r\n\r\n    }\r\n}\r\nexport const getStatus = (userId: number): ThunkAction<void, StateType, unknown, Action<string>> => {\r\n    return async (dispatch: DispatchType) => {\r\n        let response = await profileAPI.getStatus(userId)\r\n\r\n        dispatch(setStatus(response.data));\r\n    }\r\n}\r\nexport const updateStatus = (status: string): ThunkAction<void, StateType, unknown, Action<string>> => {\r\n    return async (dispatch: DispatchType) => {\r\n        let response = await profileAPI.updateStatus(status)\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setStatus(status));\r\n        }\r\n    }\r\n}\r\n\r\nexport default profileReducer;"],"sourceRoot":""}