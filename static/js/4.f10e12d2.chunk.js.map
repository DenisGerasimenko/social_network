{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/profile/myPosts/Post/Post.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageFrom.tsx","components/Dialogs/Dialogs.tsx","hoc/WithAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","path","id","className","spost","item","src","s","dialog","active","to","name","Message","message","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","createField","required","Input","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","dialogsItems","values","sendMessage","newMessageBody","mapStateToPropsForRedirect","isAuth","auth","compose","connect","actions","WrappedComponent","restProps"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,oBCAlLD,EAAOC,QAAU,CAAC,KAAO,qB,6GCqBVC,EAZmB,SAACC,GAC/B,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OAAO,gCACH,qBAAKC,UAAWC,IAAMC,KAAtB,SACI,qBAAKC,IAAI,gEAEb,qBAAKH,UAAWI,IAAEC,OAAS,IAAMD,IAAEE,OAAnC,SACI,cAAC,IAAD,CAASC,GAAIT,EAAb,SAAoBD,EAAMW,aCFvBC,EARgB,SAACZ,GAC5B,OAAO,qBAAKG,UAAWI,IAAEC,OAAlB,SAA2BR,EAAMa,W,0BCDtCC,EAAcC,YAAiB,IAqBtBC,cAAoC,CAACC,KAAM,wBAA3CD,EAhBsF,SAAChB,GAGlG,OACI,uBAAMkB,SAAUlB,EAAMmB,aAAtB,UACI,8BACKC,YAA0C,qBAAsB,iBAAkB,CAACC,IAASP,GAAcQ,OAG/G,8BACI,kDCyBDC,EA3BgB,SAACvB,GAE5B,IAAIwB,EAAQxB,EAAMyB,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAACC,GAAD,OAAO,cAAC,EAAD,CAAYlB,KAAMkB,EAAElB,KAAiBT,GAAI2B,EAAE3B,IAAZ2B,EAAE3B,OAC5E4B,EAAmBN,EAAMO,SAASH,KAAI,SAACI,GAAD,OAAO,cAAC,EAAD,CAASnB,QAASmB,EAAEnB,SAAcmB,EAAE9B,OAOrF,OACI,sBAAKC,UAAWI,IAAEoB,QAAlB,UACI,qBAAKxB,UAAWI,IAAE0B,aAAlB,SACKP,IAEL,qBAAKvB,UAAWI,IAAEwB,SAAlB,SAEI,8BAAMD,MAEV,cAAC,EAAD,CAAgBZ,SAbJ,SAACgB,GACjBlC,EAAMmC,YAAYD,EAAOE,uB,iCCvB7BC,EAA6B,SAACb,GAAD,MAA0B,CACvDc,OAAQd,EAAMe,KAAKD,S,aCSRE,sBACXC,aARkB,SAACjB,GACnB,MAAO,CACHC,YAAaD,EAAMC,eAMhB,eAAuDiB,ODA3D,SAA+BC,GAWlC,OAJqCF,YACjCJ,EAA2B,GADMI,EANiC,SAACzC,GAAW,IACzEsC,EAAuBtC,EAAvBsC,OAAUM,EAD8D,YACjD5C,EADiD,YAE7E,OAAKsC,EACE,cAACK,EAAD,eAAqBC,IADR,cAAC,IAAD,CAAUlC,GAAG,gBCJ1B8B,CAGbjB","file":"static/js/4.f10e12d2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__r8pak\",\"dialogsItems\":\"Dialogs_dialogsItems__2kbgs\",\"active\":\"Dialogs_active__3MUyq\",\"messages\":\"Dialogs_messages__3ZXRy\",\"message\":\"Dialogs_message__6vX7A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1Z591\"};","import React, {FC} from \"react\";\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport spost from './../../profile/myPosts/Post/Post.module.css'\r\n\r\ntype PropsType ={\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst DialogItem: FC<PropsType> = (props) => {\r\n    let path = '/dialogs/' + props.id;\r\n    return <div>\r\n        <div className={spost.item}>\r\n            <img src='https://image.flaticon.com/icons/png/512/2253/2253998.png'/>\r\n        </div>\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem;\r\n\r\n","import React, {FC} from \"react\";\r\nimport s from './../Dialogs.module.css';\r\n\r\ntype PropsType = {\r\n    message: string\r\n}\r\n\r\nconst Message: FC<PropsType> = (props) => {\r\n    return <div className={s.dialog}>{props.message}\r\n    </div>\r\n\r\n\r\n}\r\n\r\n\r\nexport default Message;","import React from \"react\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {createField, Input} from \"../../common/FormsControls/FormsControls\";\r\nimport {NewMessageFormValuesType} from \"../Dialogs\";\r\n\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\ntype NewMessageFormValuesKeysType = Extract<keyof NewMessageFormValuesType, string>\r\ntype PropsType={}\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormValuesType, PropsType> & PropsType> = (props) => {\r\n\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<NewMessageFormValuesKeysType>('Enter your message', 'newMessageBody', [required,maxLength50], Input,)}\r\n\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<NewMessageFormValuesType>({form: 'dialogAddMessageForm'})(AddMessageForm);","import React, {FC} from \"react\";\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {InitialStateType} from \"../../redux/dialogs-reducer\";\r\nimport AddMessageForm from \"./AddMessageForm/AddMessageFrom\";\r\n\r\n\r\nexport type PropsType = {\r\n    dialogsPage: InitialStateType\r\n    sendMessage: (messageText: string) => void\r\n}\r\n\r\nexport type NewMessageFormValuesType = {\r\n    newMessageBody: string\r\n}\r\n\r\n\r\n\r\n\r\nconst Dialogs: FC<PropsType> = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs.map((d) => <DialogItem name={d.name} key={d.id} id={d.id}/>);\r\n    let messagesElements = state.messages.map((m) => <Message message={m.message} key={m.id}/>);\r\n\r\n\r\n    let addNewMessage = (values: NewMessageFormValuesType) => {\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n\r\n                <div>{messagesElements}</div>\r\n            </div>\r\n            <AddMessageForm onSubmit={addNewMessage}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Dialogs;","import {Redirect} from \"react-router-dom\"\r\nimport React from \"react\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\ntype DispatchPropsType = {\r\n}\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n    const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n        let {isAuth,...restProps} = props\r\n        if (!isAuth) return <Redirect to='/login'/>\r\n        return <WrappedComponent{...restProps as WCP}/>\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(\r\n        mapStateToPropsForRedirect,{})\r\n    (RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}\r\n","import React from \"react\";\r\nimport Dialogs, {PropsType} from \"./Dialogs\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {actions} from \"../../redux/dialogs-reducer\";\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.FunctionComponent>(\r\n    connect<{}, {}, PropsType, AppStateType>(mapStateToProps, {...actions}),\r\n    withAuthRedirect\r\n)(Dialogs);"],"sourceRoot":""}