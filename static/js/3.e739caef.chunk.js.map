{"version":3,"sources":["components/profile/myPosts/Post/Post.module.css","components/profile/Profile.module.css","components/profile/myPosts/MyPosts.module.css","components/profile/ProfileInfo/ProfileStatusWithHooks.tsx","assets/images/IMG-cc6fce77d19c2c7cdaacc19191b9f671-V.jpg","components/profile/ProfileInfo/ProfileInfo.tsx","components/profile/myPosts/Post/Post.tsx","components/profile/myPosts/MyPosts.tsx","components/profile/myPosts/MyPostsContainer.tsx","components/profile/Profile.tsx","components/profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileInfo","profile","Preloader","className","s","descriptionBlock","src","photos","small","userPhoto","mainPhoto","isOwner","type","files","length","savePhoto","Post","item","message","likesCount","MyPosts","React","memo","postsElements","posts","reverse","map","p","id","postsBlock","AddNewPostFormRedux","onSubmit","values","addPost","newPostText","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","name","component","Textarea","placeholder","validate","required","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","autorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.e739caef.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1Z591\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__IcKa2\",\"descriptionBlock\":\"Profile_descriptionBlock__ttvQM\",\"mainPhoto\":\"Profile_mainPhoto__3FfWe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2OPYS\",\"posts\":\"MyPosts_posts__3IZfQ\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nlet arr = [0, () => {\r\n}];\r\nlet [a, setA] = arr;\r\n\r\nconst ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(()=>{\r\n        setStatus(props.status);\r\n    },[props.status])\r\n\r\n    const activateMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onSatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <span onDoubleClick={activateMode}>{props.status || '-------'}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input onChange={onSatusChange} autoFocus={true} onBlur={deactivateEditMode}\r\n                       value={status}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\n\r\nexport default ProfileStatusWithHooks;","export default __webpack_public_path__ + \"static/media/IMG-cc6fce77d19c2c7cdaacc19191b9f671-V.3fb08792.jpg\";","import React, {ChangeEvent} from 'react';\r\nimport s from './../Profile.module.css'\r\nimport {PhotosType, ProfileType} from \"../../../redux/profile-reducer\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/IMG-cc6fce77d19c2c7cdaacc19191b9f671-V.jpg\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: any\r\n}\r\n\r\nconst ProfileInfo = (props: ProfileInfoPropsType) => {\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\nconst onMainPhotoSelected = (e:ChangeEvent<HTMLInputElement>) =>{\r\n        if(e.currentTarget.files?.length){\r\n            props.savePhoto(e.currentTarget.files[0]);\r\n        }\r\n}\r\n\r\n    return (<div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={props.profile.photos?.small || userPhoto} className={s.mainPhoto}/>\r\n                {props.isOwner && <input type={'file'} onChange={onMainPhotoSelected}/>}\r\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post = (props: PostPropsType) => {\r\n\r\n    return (\r\n        <div className={s.item}>\r\n            <img src='https://i.dailymail.co.uk/1s/2020/05/12/05/28284602-0-image-a-47_1589256454760.jpg'/>\r\n            {props.message}\r\n            <div>\r\n                <span>like {props.likesCount}</span>\r\n\r\n            </div>\r\n        </div>);\r\n};\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {PostType} from \"../../../redux/profile-reducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\n\r\ntype MyPostsPropsType = {\r\n    addPost: (newPostText: string) => void\r\n    posts: Array<PostType>\r\n}\r\n\r\nconst MyPosts = React.memo((props: MyPostsPropsType) => {\r\n    let postsElements =\r\n        [...props.posts]\r\n            .reverse()\r\n            .map(p => <Post message={p.message} likesCount={p.likesCount} key={p.id}/>);\r\n\r\n    let newPostElement = React.createRef<HTMLTextAreaElement>();\r\n\r\n    let onAddPost = (values: any) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\ntype FormDataType = {\r\n    newPostText: string\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name='newPostText' component={Textarea} placeholder={'Post message'}\r\n                       validate={[required, maxLength10]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nconst AddNewPostFormRedux = reduxForm<FormDataType>({form: 'ProfileAddNewPostForm'})(AddNewPostForm)\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {StateType} from \"../../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\n\r\nlet mapStateToProps = (state: StateType) => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch:Dispatch) => {\r\n    return {\r\n        addPost: (newPostText:string) => {\r\n            dispatch(addPostActionCreator(newPostText))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from \"./myPosts/MyPostsContainer\";\r\nimport {PhotosType, ProfileType} from \"../../redux/profile-reducer\";\r\nimport s from \"../profile/Profile.module.css\";\r\n\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner:boolean\r\n    savePhoto: any\r\n\r\n}\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n\r\n    return (\r\n        <div className={s.profile}>\r\n            <ProfileInfo isOwner={props.isOwner}\r\n                         profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}\r\n                         savePhoto={props.savePhoto}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../../redux/redux-store\";\r\nimport {getStatus, getUserProfile, PhotosType, ProfileType, savePhoto, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {compose} from \"redux\";\r\n\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    autorizedUserId: number\r\n    isAuth: boolean\r\n\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: any\r\n}\r\n\r\ntype OwnPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & OwnPropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId = +this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.autorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push('/login');\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        debugger\r\n        if (this.props.match.params.userId != prevProps.match.params.userId)\r\n            this.refreshProfile();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhoto}/>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nlet mapStateToProps = (state: StateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    autorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport default compose<React.ComponentClass>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto}),\r\n    withRouter\r\n)(ProfileContainer);\r\n\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}