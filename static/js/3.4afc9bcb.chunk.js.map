{"version":3,"sources":["components/profile/myPosts/Post/Post.module.css","components/profile/Profile.module.css","components/profile/myPosts/MyPosts.module.css","components/profile/ProfileInfo/ProfileStatusWithHooks.tsx","assets/images/IMG-cc6fce77d19c2c7cdaacc19191b9f671-V.jpg","components/profile/ProfileInfo/ProfileDataForm.tsx","components/profile/ProfileInfo/ProfileInfo.tsx","components/profile/myPosts/Post/Post.tsx","components/profile/myPosts/AddPostForm/AddPostForm.tsx","components/profile/myPosts/MyPosts.tsx","components/profile/myPosts/MyPostsContainer.tsx","components/profile/Profile.tsx","components/profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","error","profile","onSubmit","onClick","className","style","formSummaryError","createField","Input","type","Textarea","Object","keys","contacts","map","key","s","contact","ProfileData","isOwner","goToEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","Preloader","descriptionBlock","src","photos","small","userPhoto","mainPhoto","files","length","savePhoto","initialValues","formData","saveProfile","then","Post","item","message","likesCount","required","MyPosts","postsElements","posts","reverse","p","id","postsBlock","values","addPost","newPostText","MyPostsMemorized","React","memo","MyPostsContainer","connect","state","profilePage","actions","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","autorizedUserId","history","push","getUserProfile","getStatus","console","refreshProfile","prevProps","prevState","Component","compose","withRouter","auth","isAuth"],"mappings":"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","file":"static/js/3.4afc9bcb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1Z591\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__IcKa2\",\"descriptionBlock\":\"Profile_descriptionBlock__ttvQM\",\"mainPhoto\":\"Profile_mainPhoto__3FfWe\",\"contact\":\"Profile_contact__NI75p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2OPYS\",\"posts\":\"MyPosts_posts__3IZfQ\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n\r\n\r\nconst ProfileStatusWithHooks:React.FC<PropsType> = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(()=>{\r\n        setStatus(props.status);\r\n    },[props.status])\r\n\r\n    const activateMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onSatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n               <b>Status: </b> <span onDoubleClick={activateMode}>{props.status || '-------'}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input onChange={onSatusChange} autoFocus={true} onBlur={deactivateEditMode}\r\n                       value={status}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\n\r\nexport default ProfileStatusWithHooks;","export default __webpack_public_path__ + \"static/media/IMG-cc6fce77d19c2c7cdaacc19191b9f671-V.3fb08792.jpg\";","import React from \"react\";\r\nimport {createField, GetStringKeys, Input, Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport s from './../Profile.module.css'\r\nimport style from \"../../common/FormsControls/FormsControls.module.css\";\r\nimport {ProfileType} from \"../../../types/types\";\r\n\r\n\r\n// export type FormDataType = {\r\n//     fullName: string\r\n//     lookingForAJob: string\r\n//     lookingForAJobDescription: string\r\n//     aboutMe: string\r\n//     profile: any\r\n// }\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n}\r\n\r\ntype ProfileTypeKeys = GetStringKeys<ProfileType>\r\n\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({\r\n                                                                                              handleSubmit,\r\n                                                                                              error,\r\n                                                                                              profile\r\n                                                                                          }) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        <div>\r\n            <button onClick={() => {\r\n            }}>save\r\n            </button>\r\n        </div>\r\n        {error && <div className={style.formSummaryError}>\r\n            {error}\r\n        </div>\r\n        }\r\n        <div>\r\n            <b>Full name</b>:{createField<ProfileTypeKeys>('Full name', 'fullName', [], Input)}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a\r\n                job</b>: {createField<ProfileTypeKeys>('', 'lookingForAJob', [], Input, {type: 'checkbox'})}\r\n\r\n        </div>\r\n        {\r\n            <div>\r\n                <b>My professional\r\n                    skills</b>:{createField('My professional skills', 'lookingForAJobDescription', [], Textarea)}\r\n            </div>\r\n        }\r\n        <div>\r\n            <b>About me</b>:\r\n            {createField<ProfileTypeKeys>('About me', 'aboutMe', [], Textarea)}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>:{Object.keys(profile.contacts).map(key => {\r\n\r\n            return <div key={key} className={s.contact}>\r\n                {/*todo:create some solution for embedded objects */}\r\n                <b>{key}:{createField(key, 'contacts.' + key, [], Input)}</b>\r\n            </div>\r\n        })}\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({form: 'edit-profile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm;","import React, {ChangeEvent, useState} from 'react';\r\nimport s from './../Profile.module.css'\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/IMG-cc6fce77d19c2c7cdaacc19191b9f671-V.jpg\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\nimport {ContactsType, ProfileType} from \"../../../types/types\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst ProfileInfo: React.FC<PropsType> = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget.files?.length) {\r\n            props.savePhoto(e.currentTarget.files[0]);\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n        //todo:remove then\r\n        props.saveProfile(formData).then(\r\n            () => {\r\n                setEditMode(false);\r\n            }\r\n        );\r\n    }\r\n\r\n    return (<div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={props.profile.photos?.small || userPhoto} className={s.mainPhoto}/>\r\n                {props.isOwner && <input type={'file'} onChange={onMainPhotoSelected}/>}\r\n                {editMode ?\r\n                    <ProfileDataForm profile={props.profile} initialValues={props.profile} onSubmit={onSubmit}/> :\r\n                    <ProfileData goToEditMode={() => setEditMode(true)} profile={props.profile}\r\n                                 isOwner={props.isOwner}/>}\r\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\n\r\nconst ProfileData: React.FC<ProfileDataPropsType> = (props) => {\r\n\r\n    return <div>\r\n        {props.isOwner && <div>\r\n            <button onClick={props.goToEditMode}>edit</button>\r\n        </div>}\r\n        <div>\r\n            <b>Full name</b>:{props.profile?.fullName}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>:{props.profile?.lookingForAJob ? 'yes' : 'no'}\r\n        </div>\r\n        {props.profile?.lookingForAJob &&\r\n        <div>\r\n            <b>My professional skills</b>:{props.profile?.lookingForAJobDescription}\r\n        </div>\r\n        }\r\n        <div>\r\n            <b>About me</b>:{props.profile?.aboutMe}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>:\r\n            {\r\n\r\n                (props.profile.contacts)\r\n\r\n                && Object.keys(props.profile.contacts).map((key) => {\r\n\r\n                    return <Contact key={key} contactTitle={key}\r\n                                    contactValue={props.profile.contacts[key as keyof ContactsType]}/>\r\n                })\r\n            }\r\n        </div>\r\n    </div>\r\n\r\n}\r\n\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\nconst Contact: React.FC<ContactPropsType> = (props) => {\r\n    return <div className={s.contact}><b>{props.contactTitle}</b>:{props.contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype PropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post: React.FC<PropsType> = (props) => {\r\n\r\n    return (\r\n        <div className={s.item}>\r\n            <img src='https://i.dailymail.co.uk/1s/2020/05/12/05/28284602-0-image-a-47_1589256454760.jpg'/>\r\n            {props.message}\r\n            <div>\r\n                <span>like {props.likesCount}</span>\r\n\r\n            </div>\r\n        </div>);\r\n};\r\n\r\nexport default Post;","import {required} from \"../../../../utils/validators/validators\";\r\nimport React from \"react\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, GetStringKeys, Input} from \"../../../common/FormsControls/FormsControls\";\r\n\r\n\r\ntype PropsType = {}\r\n\r\nexport type AddPostFormValuesType = {\r\n    newPostText: string\r\n}\r\n\r\ntype AddPostFormValuesTypeKeys = GetStringKeys<AddPostFormValuesType>\r\n\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<AddPostFormValuesType, PropsType>> = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<AddPostFormValuesTypeKeys>('Your post', 'newPostText', [required], Input)}\r\n\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nexport default reduxForm<AddPostFormValuesType, PropsType>({form: 'profile-add-post'})(AddPostForm)","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {PostType} from \"../../../types/types\";\r\nimport AddPostForm, {AddPostFormValuesType} from \"./AddPostForm/AddPostForm\";\r\n\r\n\r\nexport type MapPropsType = {\r\n    posts: Array<PostType>\r\n}\r\nexport type DispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\n\r\nconst MyPosts: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n    let postsElements =\r\n        [...props.posts]\r\n            .reverse()\r\n            .map(p => <Post message={p.message} likesCount={p.likesCount} key={p.id}/>);\r\n\r\n    let onAddPost = (values: AddPostFormValuesType) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddPostForm onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst MyPostsMemorized = React.memo(MyPosts);\r\n\r\n\r\nexport default MyPostsMemorized;","import React from 'react';\r\nimport MyPosts, {DispatchPropsType, MapPropsType} from \"./MyPosts\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {actions} from \"../../../redux/profile-reducer\";\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\n\r\nconst MyPostsContainer = connect<MapPropsType, DispatchPropsType, {}, AppStateType>(mapStateToProps, {addPost:actions.addPostActionCreator})(MyPosts)\r\n\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from \"./myPosts/MyPostsContainer\";\r\nimport s from \"../profile/Profile.module.css\";\r\nimport {ProfileType} from \"../../types/types\";\r\n\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n\r\n}\r\n\r\nconst Profile: React.FC<PropsType> = (props) => {\r\n\r\n    return (\r\n        <div className={s.profile}>\r\n            <ProfileInfo isOwner={props.isOwner}\r\n                         profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}\r\n                         savePhoto={props.savePhoto}\r\n                         saveProfile={props.saveProfile}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {compose} from \"redux\";\r\nimport {ProfileType} from \"../../types/types\";\r\n\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype MapPropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    autorizedUserId: number | null\r\n    isAuth: boolean\r\n\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => any\r\n}\r\n\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & MapPropsType & MapDispatchPropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId: number | null = +this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.autorizedUserId;\r\n            if (!userId) {\r\n                // todo: may be replace push with redirect\r\n                this.props.history.push('/login');\r\n            }\r\n        }\r\n        if (!userId) {\r\n            console.error(\"ID should exists in URI params or in state(autorizedUserId)\")\r\n        } else {\r\n            this.props.getUserProfile(userId)\r\n            this.props.getStatus(userId);\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>) {\r\n\r\n        if (this.props.match.params.userId != prevProps.match.params.userId)\r\n            this.refreshProfile();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhoto}\r\n                     saveProfile={this.props.saveProfile}/>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    autorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n\r\n});\r\n\r\nexport default compose<React.ComponentType>(\r\n    withRouter,\r\n    connect<MapPropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps, {\r\n        getUserProfile,\r\n        getStatus,\r\n        updateStatus,\r\n        savePhoto,\r\n        saveProfile\r\n    }),\r\n)(ProfileContainer);\r\n\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}