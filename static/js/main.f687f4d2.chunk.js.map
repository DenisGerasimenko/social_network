{"version":3,"sources":["utils/validators/validators.ts","assets/images/preloader.gif","components/common/Preloader/Preloader.tsx","components/common/Paginator/Paginator.module.css","api/profile-api.ts","redux/profile-reducer.ts","redux/dialogs-reducer.ts","components/Users/users.module.css","api/api.ts","serviceWorker.ts","redux/users-selectors.ts","components/common/Paginator/Paginator.tsx","assets/images/user.png","components/Users/User.tsx","components/Users/UsersSearchForm.tsx","utils/object-helpers.ts","api/users-api.ts","redux/users-reducer.ts","components/Users/Users.tsx","components/Users/UsersContainer.tsx","api/security-api.ts","api/auth-api.ts","redux/auth-reducer.ts","redux/app-reducer.ts","redux/sidebar-reducer.ts","redux/redux-store.ts","hoc/withSuspense.tsx","components/Login/LoginPage.tsx","redux/auth-selectors.ts","components/Header/Header.tsx","App.tsx","index.tsx","components/common/FormsControls/FormsControls.tsx","components/common/FormsControls/FormsControls.module.css"],"names":["required","value","maxLengthCreator","maxLength","length","Preloader","src","preloader","module","exports","profileAPI","userId","instance","get","then","res","data","status","put","photoFile","formData","FormData","append","headers","profile","initialState","posts","id","message","likesCount","actions","addPostActionCreator","newPostText","type","setUserProfile","setStatus","deletePost","postId","savePhotoSuccess","photos","getUserProfile","dispatch","a","getStatus","updateStatus","resultCode","savePhoto","file","saveProfile","getState","auth","Error","stopSubmit","_error","messages","Promise","reject","profileReducer","state","action","newPost","filter","p","dialogs","name","sendMessage","newMessageBody","dialogsReducer","body","ResultCodesEnum","ResultCodeForCaptchaEnum","axios","create","withCredentials","baseURL","Boolean","window","location","hostname","match","getUsers","createSelector","usersPage","users","u","getPageSize","pageSize","getTotalUsersCount","totalUsersCount","getCurrentPage","currentPage","getIsFetching","isFetching","getFollowingInProgress","followingInProgress","getUsersFilter","Paginator","totalItemsCount","onPageChanged","x","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","className","styles","paginator","onClick","map","cn","selectedPage","pageNumber","e","User","props","to","user","small","userPhoto","followed","disabled","some","unfollow","follow","usersSearchFormValidate","values","UsersSearchForm","React","memo","useSelector","enableReinitialize","initialValues","term","friend","String","validate","onSubmit","setSubmitting","onFilterChanged","isSubmitting","as","updateObjectInArray","items","itemId","objPropName","newObjProps","usersAPI","post","delete","payload","count","requestUsers","page","totalCount","usersReducer","Users","useDispatch","history","useHistory","useEffect","parsed","queryString","search","substr","actualFilter","Number","query","pathname","UsersPage","securityAPI","authAPI","email","login","isAuth","captchaUrl","getAuthUserData","meData","Success","getCaptchaUrl","url","authReducer","initialized","appReducer","initilalState","friends","sidebarReducer","rootReducers","combineReducers","profilePage","dialogsPage","sidebar","form","formReducer","app","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","withSuspense","WrappedComponent","Suspense","fallback","__store__","LoginReduxForm","reduxForm","handleSubmit","error","createField","Input","undefined","style","formSummaryError","LoginPage","password","rememberMe","captcha","LoginData","CaptchaIsRequired","selectIsAuth","selectCurrentUserLogin","Header","Layout","span","theme","mode","defaultSelectedKeys","Item","alt","backgroundColor","icon","UserOutlined","SubMenu","Menu","Content","Footer","Sider","DialogsContainer","lazy","ProfileContainer","SuspendedDialogs","SuspendedProfile","App","catchAllUnhandledErrors","alert","this","initializeApp","addEventListener","removeEventListener","padding","margin","width","height","title","LaptopOutlined","NotificationOutlined","minHeight","exact","path","render","textAlign","Component","AppContainer","withRouter","connect","TSApp","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","FormControl","meta","touched","children","hasError","formControl","Textarea","input","restProps","placeholder","validators","component","text"],"mappings":"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","file":"static/js/main.f687f4d2.chunk.js","sourcesContent":["export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    if (value) return undefined;\r\n    return 'Field is required';\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}\r\n","export default __webpack_public_path__ + \"static/media/preloader.25e656e5.gif\";","import preloader from \"../../../assets/images/preloader.gif\";\r\nimport React from \"react\";\r\n\r\nlet Preloader: React.FC = () => {\r\n    return <div>\r\n        <img src={preloader}/>\r\n    </div>\r\n}\r\n\r\nexport default Preloader;\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Paginator_selectedPage__Dmynb\"};","import {instance, APIResponseType} from \"./api\";\r\nimport {ContactsType, PhotosType, ProfileType} from \"../types/types\";\r\n\r\ntype ResponseProfileGetType = {\r\n    aboutMe: string\r\n    contacts: ContactsType\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    userId: number\r\n    photos: PhotosType\r\n}\r\n\r\ntype SavePhotoResponseDataType={\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n\r\n    getProfile(userId: number) {\r\n        return instance.get<ResponseProfileGetType>(`profile/${userId}`).then(res => res.data)\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/` + userId).then(res => res.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<APIResponseType>(`profile/status`, {status: status}).then(res => res.data)\r\n    },\r\n    savePhoto(photoFile: any) {\r\n        const formData = new FormData();\r\n        formData.append('image', photoFile);\r\n        return instance.put<APIResponseType<SavePhotoResponseDataType>>(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }).then(res => res.data)\r\n    },\r\n    saveProfile(profile: ProfileType) {\r\n        return instance.put<APIResponseType>(`profile`, profile).then(res => res.data)\r\n    }\r\n}","import {AppStateType, BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\nimport {FormAction, stopSubmit} from \"redux-form\";\r\nimport {PhotosType, PostType, ProfileType} from \"../types/types\";\r\nimport {profileAPI} from \"../api/profile-api\";\r\n\r\n\r\nexport type ActionsType = InferActionsTypes<typeof actions>\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport type ThunkType = BaseThunkType<ActionsType | FormAction>\r\n\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: 'Hi, how are you?', likesCount: 12},\r\n        {id: 2, message: 'It\\'s my first post', likesCount: 11},\r\n        {id: 3, message: 'It\\'s my first post', likesCount: 11},\r\n        {id: 4, message: 'It\\'s my first post', likesCount: 11}] as Array<PostType>,\r\n    profile: {} as ProfileType,\r\n    status: '',\r\n};\r\n\r\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'SN/PROFILE/ADD_POST': {\r\n            let newPost = {\r\n                id: 5,\r\n                message: action.newPostText,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost]\r\n            };\r\n        }\r\n\r\n        case 'SN/PROFILE/SET_STATUS': {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n        }\r\n        case 'SN/PROFILE/SET_USER_PROFILE': {\r\n            return {...state, profile: action.profile}\r\n        }\r\n        case 'SN/PROFILE/DELETE_POST': {\r\n            return {...state, posts: state.posts.filter(p => p.id != action.postId)}\r\n        }\r\n        case 'SN/PROFILE/SAVE_PHOTO_SUCCESS': {\r\n            return {...state, profile: {...state.profile, photos: action.photos}}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    addPostActionCreator: (newPostText: string) => ({type: 'SN/PROFILE/ADD_POST', newPostText} as const),\r\n\r\n    setUserProfile: (profile: ProfileType) => ({type: 'SN/PROFILE/SET_USER_PROFILE', profile} as const),\r\n\r\n    setStatus: (status: string) => ({type: 'SN/PROFILE/SET_STATUS', status} as const),\r\n\r\n    deletePost: (postId: number) => ({type: 'SN/PROFILE/DELETE_POST', postId} as const),\r\n\r\n    savePhotoSuccess: (photos: PhotosType) => ({type: 'SN/PROFILE/SAVE_PHOTO_SUCCESS', photos} as const)\r\n}\r\n\r\n\r\nexport const getUserProfile = (userId: number): ThunkType => {\r\n\r\n    return async (dispatch) => {\r\n        let data = await profileAPI.getProfile(userId)\r\n        dispatch(actions.setUserProfile(data));\r\n\r\n    }\r\n}\r\nexport const getStatus = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        let data = await profileAPI.getStatus(userId)\r\n\r\n        dispatch(actions.setStatus(data));\r\n    }\r\n}\r\nexport const updateStatus = (status: string): ThunkType => {\r\n    return async (dispatch) => {\r\n        let data = await profileAPI.updateStatus(status)\r\n        if (data.resultCode === 0) {\r\n            dispatch(actions.setStatus(status));\r\n        }\r\n    }\r\n}\r\n\r\nexport const savePhoto = (file: File): ThunkType => {\r\n    return async (dispatch) => {\r\n        let data = await profileAPI.savePhoto(file)\r\n        if (data.resultCode === 0) {\r\n            dispatch(actions.savePhotoSuccess(data.data.photos));\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const saveProfile = (profile: ProfileType): ThunkType => {\r\n    return async (dispatch, getState: () => AppStateType) => {\r\n        const userId = getState().auth.userId;\r\n        let data = await profileAPI.saveProfile(profile)\r\n        if (data.resultCode === 0) {\r\n            if (userId != null) {\r\n                dispatch(getUserProfile(userId));\r\n            } else {\r\n                throw new Error(\"userId can't be null\")\r\n            }\r\n        } else {\r\n            dispatch(stopSubmit('edit-profile', {_error: data.messages[0]}));\r\n            return Promise.reject(data.messages[0]);\r\n        }\r\n    }\r\n}\r\n\r\nexport default profileReducer;","import {InferActionsTypes} from \"./redux-store\";\r\n\r\nexport type DialogType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nexport type DialogPageType = {\r\n    messages:Array<MessageType>\r\n    dialogs: Array<DialogType>\r\n}\r\n\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nlet initialState = {\r\n    messages: [\r\n        {id: 1, message: 'Hi'},\r\n        {id: 2, message: 'Hi'},\r\n        {id: 3, message: 'Hello'},\r\n        {id: 4, message: 'How are you?'},\r\n        {id: 5, message: 'How old are you?'},] as Array<MessageType>,\r\n    dialogs: [\r\n        {id: 1, name: 'Misha'},\r\n        {id: 2, name: 'Fedya'},\r\n        {id: 3, name: 'Lesha'},\r\n        {id: 4, name: 'Maxim'},\r\n        {id: 5, name: 'Masha'},\r\n        {id: 6, name: 'Katya'}\r\n    ] as Array<DialogType>\r\n};\r\n\r\nconst dialogsReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case 'SN/DIALOGS/SEND_MESSAGE':\r\n            let body = action.newMessageBody;\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 6, message: body}]\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions={\r\n    sendMessage: (newMessageBody: string) => ({type: 'SN/DIALOGS/SEND_MESSAGE', newMessageBody} as const)\r\n}\r\n\r\n\r\nexport default dialogsReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__1YA3l\"};","import axios from \"axios\";\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    resultCode: RC\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1,\r\n}\r\n\r\nexport enum ResultCodeForCaptchaEnum {\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\n\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        'API-KEY': \"4c7ebabc-af48-45d8-9001-1fb93ae1053e\"\r\n    }\r\n})\r\n\r\n\r\n\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {AppStateType} from \"./redux-store\";\r\nimport {createSelector} from \"reselect\";\r\n\r\n\r\nconst getUsersSelector = (state: AppStateType) => {\r\n    return state.usersPage.users;\r\n}\r\n\r\n\r\nexport const getUsers = createSelector(getUsersSelector,(users) => {\r\n   return users.filter((u) => true);\r\n})\r\n\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize;\r\n}\r\n\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount;\r\n}\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage;\r\n}\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching;\r\n}\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress;\r\n}\r\nexport const getUsersFilter = (state: AppStateType) => {\r\n    return state.usersPage.filter;\r\n}\r\n\r\n\r\n","import React, {useState} from \"react\";\r\nimport styles from \"./Paginator.module.css\";\r\nimport cn from 'classnames';\r\n\r\n\r\ntype PropsType = {\r\n    pageSize: number\r\n    totalItemsCount: number\r\n    currentPage?: number\r\n    onPageChanged?: (pageNumber: number) => void\r\n    portionSize?: number\r\n}\r\n\r\n\r\nlet Paginator: React.FC<PropsType> = ({\r\n                                          pageSize,\r\n                                          totalItemsCount,\r\n                                          currentPage = 1,\r\n                                          onPageChanged = x => x,\r\n                                          portionSize = 10\r\n                                      }) => {\r\n\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize)\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n    return <div className={styles.paginator}>\r\n        {portionNumber > 1 &&\r\n        <button onClick={() => {\r\n            setPortionNumber(portionNumber - 1)\r\n        }}>Prev</button>}\r\n        {pages\r\n            .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n            .map(p => {\r\n                return <span className={cn({\r\n                    [styles.selectedPage]: currentPage === p\r\n                }, styles.pageNumber)}\r\n                             key={p}\r\n                             onClick={(e) => {\r\n                                 onPageChanged(p)\r\n                             }}>{p}</span>\r\n            })}\r\n        {portionCount > portionNumber &&\r\n        <button onClick={() => {\r\n            setPortionNumber(portionNumber + 1)\r\n        }}>NEXT</button>}\r\n    </div>\r\n\r\n}\r\n\r\nexport default Paginator;","export default __webpack_public_path__ + \"static/media/user.32ad9931.png\";","import React from \"react\";\r\nimport styles from \"./users.module.css\";\r\nimport userPhoto from \"../../assets/images/user.png\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {UserType} from \"../../types/types\";\r\n\r\n\r\ntype PropsType = {\r\n    key: number\r\n    user: UserType\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    followingInProgress: Array<number>\r\n}\r\n\r\n\r\nexport const User: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div>\r\n        <span>\r\n            <div>\r\n                <NavLink to={'/profile/' + props.user.id}>\r\n                <img src={props.user.photos.small != null ? props.user.photos.small : userPhoto}\r\n                     className={styles.userPhoto}/>\r\n                </NavLink>\r\n\r\n    </div>\r\n    <div>\r\n    {props.user.followed ? <button disabled={props.followingInProgress.some((id: number) => id === props.user.id)}\r\n                                   onClick={() => {\r\n                                       props.unfollow(props.user.id);\r\n                                   }}>\r\n            Unfollow</button>\r\n\r\n        : <button disabled={props.followingInProgress.some(id => id === props.user.id)}\r\n                  onClick={() => {\r\n                      props.follow(props.user.id)\r\n                  }}>\r\n            Follow</button>\r\n    };\r\n    </div>\r\n    </span>\r\n            <span>\r\n    <span>\r\n        <div>{props.user.name}</div>\r\n    <div>{props.user.status}</div>\r\n    </span>\r\n    <span>\r\n    <div>{'u.location.country'}</div>\r\n    <div>{'u.location.city'}</div>\r\n    </span>\r\n    </span>\r\n        </div>)\r\n\r\n\r\n}\r\n\r\nexport default User;","import {Field, Form, Formik} from \"formik\";\r\nimport React from \"react\";\r\nimport {FilterType} from \"../../redux/users-reducer\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getUsersFilter} from \"../../redux/users-selectors\";\r\n\r\nconst usersSearchFormValidate = (values: any) => {\r\n    const errors = {};\r\n    return errors;\r\n}\r\n\r\ntype FriendFormType = 'true' | 'false' | 'null';\r\ntype FormType = {\r\n    term: string\r\n    friend: FriendFormType\r\n\r\n}\r\n\r\ntype PropsType = {\r\n    onFilterChanged: (filter: FilterType) => void\r\n}\r\n\r\nexport const UsersSearchForm: React.FC<PropsType> = React.memo((props) => {\r\n\r\n    const filter = useSelector(getUsersFilter)\r\n    const submit = (values: FormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\r\n        const filter: FilterType = {\r\n            term: values.term,\r\n            friend: values.friend === 'null' ? null : values.friend === 'true' ? true : false\r\n        }\r\n        props.onFilterChanged(filter)\r\n        setSubmitting(false)\r\n    }\r\n\r\n    return <div>\r\n        <Formik\r\n            enableReinitialize\r\n            initialValues={{term: filter.term, friend: String(filter.friend) as FriendFormType}}\r\n            validate={usersSearchFormValidate}\r\n            onSubmit={submit}\r\n        >\r\n            {({isSubmitting}) => (\r\n                <Form>\r\n                    <Field type=\"text\" name=\"term\"/>\r\n                    <Field name=\"friend\" as=\"select\">\r\n                        <option value=\"null\">All</option>\r\n                        <option value=\"true\">Only followed</option>\r\n                        <option value=\"false\">Only unfollowed</option>\r\n                    </Field>\r\n                    <button type=\"submit\" disabled={isSubmitting}>\r\n                        Find\r\n                    </button>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    </div>\r\n})","export const updateObjectInArray = (items: any, itemId: any, objPropName: any, newObjProps: any) => {\r\n    return items.map((u: any) => {\r\n        if (u[objPropName] === itemId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u;\r\n    })\r\n}","import {instance, APIResponseType} from \"./api\";\r\nimport {UserType} from \"../types/types\";\r\n\r\ntype ResponseUserGetType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10, term: string = '', friend: null | boolean = null) {\r\n        return instance.get<ResponseUserGetType>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? '' : `&friend=${friend}`))\r\n            .then(res => {\r\n                return res.data\r\n            });\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post<APIResponseType>(`follow/${userId}`).then(res => res.data)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`).then(res => res.data) as Promise<APIResponseType>\r\n    }\r\n}\r\n","import {Dispatch} from \"redux\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\nimport {updateObjectInArray} from \"../utils/object-helpers\";\r\nimport {UserType} from \"../types/types\";\r\nimport {usersAPI} from \"../api/users-api\";\r\nimport {APIResponseType, ResultCodesEnum} from \"../api/api\";\r\n\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport type FilterType = typeof initialState.filter\r\n\r\ntype ThunkType = BaseThunkType<ActionsType>\r\n\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: [] as Array<number>, // array of user ids\r\n    filter: {\r\n        term: '',\r\n        friend: null as null | boolean\r\n    }\r\n}\r\n\r\nconst usersReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'SN/USERS/FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: true})\r\n            }\r\n\r\n        case 'SN/USERS/UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: false})\r\n            }\r\n        case 'SN/USERS/SET_USERS': {\r\n            return {...state, users: action.users}\r\n        }\r\n        case 'SN/USERS/SET_CURRENT_PAGE': {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case 'SN/USERS/SET_USERS_TOTAL_COUNT': {\r\n            return {...state, totalUsersCount: action.count}\r\n        }\r\n        case 'SN/USERS/TOGGLE_IS_FETCHING': {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case \"SN/USERS/SET_FILTER\": {\r\n            return {...state, filter: action.payload}\r\n        }\r\n        case 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS': {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    followSuccess: (userId: number) => ({type: 'SN/USERS/FOLLOW', userId} as const),\r\n\r\n    unfollowSuccess: (userId: number) => ({type: 'SN/USERS/UNFOLLOW', userId} as const),\r\n\r\n    setUsers: (users: Array<UserType>) => ({type: 'SN/USERS/SET_USERS', users} as const),\r\n\r\n    setCurrentPage: (currentPage: number) => ({type: 'SN/USERS/SET_CURRENT_PAGE', currentPage} as const),\r\n\r\n    setFilter: (filter:FilterType) => ({type: 'SN/USERS/SET_FILTER', payload: filter} as const),\r\n\r\n    setTotalUsersCount: (totalUsersCount: number) => ({\r\n        type: 'SN/USERS/SET_USERS_TOTAL_COUNT',\r\n        count: totalUsersCount\r\n    } as const),\r\n\r\n    toggleIsFetching: (isFetching: boolean) => ({type: 'SN/USERS/TOGGLE_IS_FETCHING', isFetching} as const),\r\n\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => ({\r\n        type: 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS',\r\n        isFetching,\r\n        userId\r\n    } as const)\r\n}\r\n\r\n\r\nexport const requestUsers = (page: number, pageSize: number, filter: FilterType): ThunkType => {\r\n    return async (dispatch) => {\r\n        dispatch(actions.toggleIsFetching(true));\r\n        dispatch(actions.setCurrentPage(page));\r\n        dispatch(actions.setFilter(filter))\r\n\r\n        let data = await usersAPI.getUsers(page, pageSize, filter.term,filter.friend)\r\n        dispatch(actions.toggleIsFetching(false));\r\n        dispatch(actions.setUsers(data.items));\r\n        dispatch(actions.setTotalUsersCount(data.totalCount));\r\n    }\r\n}\r\nconst _followUnfollowFlow = async (dispatch: Dispatch<ActionsType>,\r\n                                   userId: number,\r\n                                   apiMethod: (userId: number) => Promise<APIResponseType>,\r\n                                   actionCreator: (userId: number) => ActionsType) => {\r\n    dispatch(actions.toggleFollowingProgress(true, userId));\r\n    debugger\r\n    let res = await apiMethod(userId)\r\n\r\n    if (res.resultCode === 0) {\r\n        dispatch(actionCreator(userId));\r\n    }\r\n    dispatch(actions.toggleFollowingProgress(false, userId))\r\n}\r\n\r\n\r\nexport const follow = (userId: number): ThunkType => {\r\n    return async (dispatch, getState, extraArgument) => {\r\n        await _followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), actions.followSuccess)\r\n    }\r\n}\r\nexport const unfollow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        await _followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), actions.unfollowSuccess)\r\n    }\r\n}\r\n\r\nexport default usersReducer;","import React, {useEffect} from \"react\";\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport User from \"./User\";\r\nimport {UsersSearchForm} from \"./UsersSearchForm\";\r\nimport {FilterType, requestUsers} from \"../../redux/users-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers,\r\n    getUsersFilter\r\n} from \"../../redux/users-selectors\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport * as queryString from \"querystring\";\r\n\r\n\r\ntype PropsType = {}\r\n\r\n\r\ntype QueryParamsType = { term?: string; page?: string; friend?: string };\r\nexport const Users: React.FC<PropsType> = (props) => {\r\n\r\n    const users = useSelector(getUsers)\r\n    const totalUsersCount = useSelector(getTotalUsersCount)\r\n    const currentPage = useSelector(getCurrentPage)\r\n    const pageSize = useSelector(getPageSize)\r\n    const filter = useSelector(getUsersFilter)\r\n    const followingInProgress = useSelector(getFollowingInProgress)\r\n\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n    useEffect(() => {\r\n\r\n        const parsed = queryString.parse(history.location.search.substr(1)) as QueryParamsType\r\n\r\n        let actualPage = currentPage\r\n        let actualFilter = filter\r\n        if (parsed.page) actualPage = Number(parsed.page)\r\n        if (parsed.term) actualFilter = {...actualFilter, term: parsed.term as string}\r\n        switch (parsed.friend) {\r\n            case 'null':\r\n                actualFilter = {...actualFilter, friend: null}\r\n                break\r\n            case 'true':\r\n                actualFilter = {...actualFilter, friend: true}\r\n                break\r\n            case 'fasle':\r\n                actualFilter = {...actualFilter, friend: false}\r\n                break\r\n        }\r\n        if (parsed.friend) actualFilter = {...actualFilter}\r\n        dispatch(requestUsers(currentPage, pageSize, filter))\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const query:QueryParamsType = {}\r\n        if (!!filter.term) query.term = filter.term\r\n        if (!!filter.friend !==null) query.friend = String(filter.friend)\r\n        if (currentPage !==1) query.page = String(currentPage)\r\n\r\n        history.push({\r\n            pathname: '/users',\r\n            search: queryString.stringify(query)\r\n        })\r\n    }, [filter,currentPage])\r\n\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(requestUsers(pageNumber, pageSize, filter))\r\n    }\r\n\r\n    const onFilterChanged = (filter: FilterType) => {\r\n        dispatch(requestUsers(1, pageSize, filter))\r\n    }\r\n\r\n    const follow = (userId: number) => {\r\n        dispatch(follow(userId))\r\n    }\r\n    const unfollow = (userId: number) => {\r\n        dispatch(unfollow(userId))\r\n    }\r\n\r\n\r\n    return <div>\r\n\r\n        <UsersSearchForm onFilterChanged={onFilterChanged}/>\r\n        <Paginator currentPage={currentPage} onPageChanged={onPageChanged}\r\n                   totalItemsCount={totalUsersCount} pageSize={pageSize}/>\r\n        <div>\r\n            {\r\n                users.map(u => <User user={u}\r\n                                     key={u.id}\r\n                                     followingInProgress={followingInProgress}\r\n                                     follow={follow}\r\n                                     unfollow={unfollow}\r\n                />)\r\n            }\r\n        </div>\r\n    </div>\r\n}\r\n","import React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {getIsFetching,} from \"../../redux/users-selectors\";\r\nimport {Users} from \"./Users\";\r\n\r\n\r\n\r\n\r\nexport const UsersPage: React.FC = () => {\r\n\r\n    const isFetching = useSelector(getIsFetching)\r\n\r\n    return <>\r\n        {isFetching ? <Preloader/> : null}\r\n        <Users/>\r\n    </>\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {instance} from \"./api\";\r\n\r\ntype ResponseCaptchaUrlGetType = {\r\n    url: string\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get<ResponseCaptchaUrlGetType>(`security/get-captcha-url`).then(res=>res.data)\r\n    }\r\n}","import {instance, APIResponseType, ResultCodeForCaptchaEnum, ResultCodesEnum} from \"./api\";\r\n\r\n\r\ntype MeResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: null | string\r\n}\r\n\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<APIResponseType<MeResponseDataType>>('auth/me').then(res => res.data)\r\n    },\r\n    login(data: LoginParamsType) {\r\n        return instance.post<APIResponseType<LoginResponseDataType,ResultCodesEnum | ResultCodeForCaptchaEnum>>('auth/login/', data)\r\n            .then(res => res.data)\r\n    },\r\n    logout() {\r\n        return instance.delete('auth/login');\r\n    },\r\n}","import {ResultCodeForCaptchaEnum, ResultCodesEnum} from \"../api/api\";\r\nimport {FormAction, stopSubmit} from \"redux-form\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\nimport {securityAPI} from \"../api/security-api\";\r\nimport {authAPI, LoginParamsType} from \"../api/auth-api\";\r\n\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\r\n\r\n\r\nlet initialState = {\r\n    userId: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captchaUrl: null as string | null //if null,then captcha is not required\r\n}\r\n\r\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'SN/auth/SET_USER_DATA':\r\n        case 'SN/auth/GET_CAPTCHA_URL_SUCCESS':\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => (\r\n        {type: 'SN/auth/SET_USER_DATA', payload: {userId, email, login, isAuth}} as const),\r\n    getCaptchaUrlSuccess: (captchaUrl: string) => (\r\n        {type: 'SN/auth/GET_CAPTCHA_URL_SUCCESS', payload: {captchaUrl}} as const)\r\n}\r\n\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    let meData = await authAPI.me()\r\n\r\n    if (meData.resultCode === ResultCodesEnum.Success) {\r\n        let {id, email, login} = meData.data;\r\n        dispatch(actions.setAuthUserData(id, email, login, true));\r\n    }\r\n}\r\n\r\n\r\nexport const login = (data: LoginParamsType): ThunkType =>\r\n    async (dispatch) => {\r\n\r\n        dispatch(stopSubmit('login', {_error: 'Common error'}));\r\n\r\n        let LoginData = await authAPI.login(data)\r\n\r\n        if (LoginData.resultCode === ResultCodesEnum.Success) {\r\n            // success, get auth LoginData\r\n            dispatch(getAuthUserData())\r\n        } else {\r\n            if (LoginData.resultCode === ResultCodeForCaptchaEnum.CaptchaIsRequired) {\r\n                dispatch(getCaptchaUrl());\r\n            }\r\n            let message = LoginData.messages.length > 0 ? LoginData.messages[0] : 'Some error';\r\n            dispatch(stopSubmit('login', {_error: message}));\r\n        }\r\n    }\r\nexport const getCaptchaUrl = (): ThunkType =>\r\n    async (dispatch) => {\r\n\r\n        const data = await securityAPI.getCaptchaUrl()\r\n        const captchaUrl = data.url;\r\n\r\n        dispatch(actions.getCaptchaUrlSuccess(captchaUrl));\r\n    }\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    let res = await authAPI.logout()\r\n\r\n    if (res.data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(actions.setAuthUserData(null, null, null, false));\r\n    }\r\n}\r\n\r\n\r\nexport default authReducer;","import {getAuthUserData} from \"./auth-reducer\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\n\r\n\r\ntype ThunkType = BaseThunkType<ActionsType>\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\n\r\nlet initialState = {\r\n    initialized: false\r\n}\r\n\r\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'SN/APP/INITIALIZED_SUCCESS':\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    initializedSuccess: () => ({type: 'SN/APP/INITIALIZED_SUCCESS'} as const)\r\n}\r\n\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(getAuthUserData());\r\n    promise.then(() => {\r\n        dispatch(actions.initializedSuccess());\r\n    })\r\n\r\n}\r\n\r\nexport default appReducer;","export type FriendType = {\r\n    id: number\r\n    name: string\r\n}\r\ntype InitilalStateType = typeof initilalState\r\n\r\n\r\nlet initilalState = {\r\n    friends: [\r\n        {id: 1, name: 'Dima'},\r\n        {id: 2, name: 'Ivan'},\r\n        {id: 3, name: 'Tanya'},\r\n    ] as Array<FriendType>\r\n}\r\n\r\nconst sidebarReducer = (state = initilalState): InitilalStateType => {\r\n\r\n\r\n    return state;\r\n}\r\n\r\nexport default sidebarReducer;","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer, {actions} from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware, {ThunkAction} from 'redux-thunk';\r\nimport {reducer as formReducer} from 'redux-form';\r\nimport appReducer from \"./app-reducer\";\r\n\r\nlet rootReducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n\r\n});\r\n\r\n\r\nexport type InferActionsTypes<T> = T extends { [key: string]: (...args: any[]) => infer U } ? U : never\r\n\r\n\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(rootReducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducers>;\r\n\r\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\n\r\nexport type ReduxStoreType = typeof store;\r\n\r\n\r\nexport default store;\r\n\r\n\r\n// @ts-ignore\r\nwindow.__store__ = store","import React from \"react\";\r\n\r\n\r\nexport function withSuspense<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n    return (props: WCP) => {\r\n        return <React.Suspense fallback={<div>loading...</div>}>\r\n            <WrappedComponent{...props}/>\r\n        </React.Suspense>\r\n    }\r\n}\r\n","import React from 'react';\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport style from '../common/FormsControls/FormsControls.module.css'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {createField, Input} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\n\r\n\r\ntype LoginFormOwnProps = {\r\n    captchaUrl: string | null\r\n}\r\n\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> = ({\r\n                                                                                                                handleSubmit,\r\n                                                                                                                error,\r\n                                                                                                                captchaUrl\r\n                                                                                                            }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField<LoginFormValuesTypeKeys>('Email', 'email', [required], Input,)}\r\n            {createField<LoginFormValuesTypeKeys>('Password', 'password', [required], Input, {type: 'password'})}\r\n            {createField<LoginFormValuesTypeKeys>(undefined, 'rememberMe', [], Input, {type: 'checkbox'}, 'rememberMe')}\r\n\r\n\r\n            {captchaUrl && <img src={captchaUrl}/>}\r\n            {captchaUrl && createField<LoginFormValuesTypeKeys>('Symbols from image', 'captcha', [required], Input, {})}\r\n\r\n            {error && <div className={style.formSummaryError}>\r\n                {error}\r\n            </div>\r\n            }\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'login'})(LoginForm)\r\n\r\n\r\nexport type LoginFormValuesType = {\r\n    captcha: string\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\ntype LoginFormValuesTypeKeys = Extract<keyof LoginFormValuesType, string>\r\n\r\n\r\nexport const LoginPage: React.FC = () => {\r\n\r\n    const captchaUrl = useSelector((state: AppStateType) => state.auth.captchaUrl)\r\n    const isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\r\n    const dispatch = useDispatch()\r\n\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        dispatch(login({\r\n            email: formData.email,\r\n            password: formData.password,\r\n            rememberMe: formData.rememberMe,\r\n            captcha: formData.captcha\r\n        }));\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl}/>\r\n    </div>\r\n}\r\n\r\n\r\n","import {AppStateType} from \"./redux-store\";\r\n\r\n\r\nexport const selectIsAuth = (state: AppStateType) => {\r\n    return state.auth.isAuth;\r\n}\r\nexport const selectCurrentUserLogin = (state: AppStateType) => {\r\n    return state.auth.login;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import React, {FC} from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport {Avatar, Col, Layout, Menu, Row, Button} from \"antd\";\r\nimport {UserOutlined} from \"@ant-design/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {selectCurrentUserLogin, selectIsAuth} from \"../../redux/auth-selectors\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\n\r\n\r\nexport const Header: FC = () => {\r\n\r\n    const isAuth = useSelector(selectIsAuth)\r\n    const login = useSelector(selectCurrentUserLogin)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const logoutCallback = () => {\r\n        dispatch(logout())\r\n    }\r\n\r\n    const {Header} = Layout;\r\n\r\n    return <Header className=\"header\">\r\n        <Row>\r\n            <Col span={18}>\r\n                <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']}>\r\n                    <Menu.Item key=\"1\"><Link to='/users'>Users</Link></Menu.Item>\r\n                </Menu>\r\n            </Col>\r\n\r\n            {isAuth\r\n                ? <><Col span={1}>\r\n                    <Avatar alt={login || ''} style={{backgroundColor: '#87d068'}} icon={<UserOutlined/>}/>\r\n\r\n            </Col>\r\n                    <Col span={5}>\r\n                        <Button onClick={logoutCallback}>Log out</Button>\r\n                    </Col>\r\n                </>\r\n                : <Col span={6}>\r\n                    <Button>\r\n                    <Link to={'/login'}>Login</Link>\r\n                    </Button>\r\n                </Col>}\r\n        </Row>\r\n    </Header>\r\n\r\n    // (<header className={s.header}>\r\n    //     <img\r\n    //         src='https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcQnNLfpaoxKO2v0-m4gmIhyp_IavIeoa1xuKlgofksobKcJ_gja&usqp=CAU'/>\r\n    //\r\n    //     <div className={s.loginBlock}>\r\n    //         {props.isAuth\r\n    //             ? <div>{props.login} - <button onClick={props.logout}>Log out</button></div>\r\n    //             : <NavLink to={'/login'}>Login</NavLink>}\r\n    //     </div>\r\n    // </header>);\r\n};\r\n\r\n\r\n\r\n","import React from \"react\";\nimport './App.css';\nimport {HashRouter, Link, Redirect, Route, Switch, withRouter} from 'react-router-dom';\nimport {UsersPage} from \"./components/Users/UsersContainer\";\nimport {connect, Provider} from \"react-redux\";\nimport {compose} from \"redux\";\nimport {initializeApp} from \"./redux/app-reducer\";\nimport store, {AppStateType} from \"./redux/redux-store\";\nimport Preloader from \"./components/common/Preloader/Preloader\";\nimport {withSuspense} from \"./hoc/withSuspense\";\nimport {LoginPage} from \"./components/Login/LoginPage\";\nimport 'antd/dist/antd.css'\nimport {Breadcrumb, Button, Layout, Menu} from \"antd\";\nimport {LaptopOutlined, NotificationOutlined, UserOutlined} from '@ant-design/icons';\nimport {Header} from \"./components/Header/Header\";\n\n\nconst {SubMenu} = Menu;\nconst {Content, Footer, Sider} = Layout;\n\n\n//import DialogsContainer from \"./components/Dialogs/DialogsContainer\";\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'))\n\n//import ProfileContainer from \"./components/profile/ProfileContainer\";\nconst ProfileContainer = React.lazy(() => import('./components/profile/ProfileContainer'))\n\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>\ntype DispatchPropsType = {\n    initializeApp: () => void\n}\n\nconst SuspendedDialogs = withSuspense(DialogsContainer)\nconst SuspendedProfile = withSuspense(ProfileContainer)\n\nclass App extends React.Component<MapPropsType & DispatchPropsType> {\n\n    catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\n        alert(\"Some error occured\");\n        //console.error(promiseRejectionEvent);\n    }\n\n    componentDidMount() {\n        this.props.initializeApp();\n        window.addEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors);\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n\n        return (\n            <Layout>\n                <Header/>\n                <Content style={{padding: '0 50px'}}>\n                    <Breadcrumb style={{margin: '16px 0'}}>\n                        <Breadcrumb.Item>Home</Breadcrumb.Item>\n                        <Breadcrumb.Item>List</Breadcrumb.Item>\n                        <Breadcrumb.Item>App</Breadcrumb.Item>\n                    </Breadcrumb>\n                    <Layout className=\"site-layout-background\" style={{padding: '24px 0'}}>\n                        <Sider className=\"site-layout-background\" width={200}>\n                            <Menu\n                                mode=\"inline\"\n                                //defaultSelectedKeys={['2']}\n                                // defaultOpenKeys={['sub1']}\n                                style={{height: '100%'}}\n                            >\n                                <SubMenu key=\"sub1\" icon={<UserOutlined/>} title=\"My Profile\">\n                                    <Menu.Item key=\"1\"><Link to='/profile'>Profile</Link></Menu.Item>\n                                    <Menu.Item key=\"2\"><Link to='/dialogs'>Messages</Link></Menu.Item>\n                                    <Menu.Item key=\"3\">option3</Menu.Item>\n                                    <Menu.Item key=\"4\">option4</Menu.Item>\n                                </SubMenu>\n                                <SubMenu key=\"sub2\" icon={<LaptopOutlined/>} title=\"Users\">\n                                    <Menu.Item key=\"5\"><Link to='/users'>Users</Link></Menu.Item>\n                                    <Menu.Item key=\"6\">option6</Menu.Item>\n                                    <Menu.Item key=\"7\">option7</Menu.Item>\n                                    <Menu.Item key=\"8\">option8</Menu.Item>\n                                </SubMenu>\n                                <SubMenu key=\"sub3\" icon={<NotificationOutlined/>} title=\"subnav 3\">\n                                    <Menu.Item key=\"9\">option9</Menu.Item>\n                                    <Menu.Item key=\"10\">option10</Menu.Item>\n                                    <Menu.Item key=\"11\">option11</Menu.Item>\n                                    <Menu.Item key=\"12\">option12</Menu.Item>\n                                </SubMenu>\n                            </Menu>\n                        </Sider>\n                        <Content style={{padding: '0 24px', minHeight: 280}}>\n                            <Switch>\n                                <Route exact path='/'\n                                       render={() => <Redirect to={'/profile'}/>}/>\n                                <Route path='/dialogs'\n                                       render={() => <SuspendedDialogs/>}/>\n                                <Route path='/profile/:userId?'\n                                       render={() => <SuspendedProfile/>}/>\n                                <Route path={'/users'}\n                                       render={() => <UsersPage/>}/>\n                                <Route path='/login'\n                                       render={() => <LoginPage/>}/>\n                                <Route path='*'\n                                       render={() => <div>404 NOT FOUND\n                                           <Button type={\"primary\"}>Ok</Button>\n                                       </div>}/>\n                            </Switch>\n                        </Content>\n                    </Layout>\n                </Content>\n                <Footer style={{textAlign: 'center'}}>Social Network 2021</Footer>\n            </Layout>\n            /*  <div className='app-wrapper'>\n                  <HeaderContainer/>\n                  <Navbar/>\n                  <div className='app-wrapper-content'>\n                      <Switch>\n                          <Route exact path='/'\n                                 render={() => <Redirect to={'/profile'}/>}/>\n                          <Route path='/dialogs'\n                                 render={() => <SuspendedDialogs/>}/>\n                          <Route path='/profile/:userId?'\n                                 render={() => <SuspendedProfile/>}/>\n                          <Route path={'/users'}\n                                 render={() => <UsersPage/>}/>\n                          <Route path='/login'\n                                 render={() => <LoginPage/>}/>\n                          <Route path='*'\n                                 render={() => <div>404 NOT FOUND\n                                 <Button type={\"primary\"} >Ok</Button>\n                                 </div>}/>\n                      </Switch>\n                  </div>\n              </div>*/\n        )\n    }\n}\n\nconst mapStateToProps = (state: AppStateType) => ({\n    initialized: state.app.initialized\n})\n\nlet AppContainer = compose<React.ComponentType>(\n    withRouter,\n    connect(mapStateToProps, {initializeApp}))(App)\n\nconst TSApp: React.FC = () => {\n    return <HashRouter>\n        <Provider store={store}>\n            <AppContainer/>\n        </Provider>\n    </HashRouter>\n}\n\nexport default TSApp;","import * as serviceWorker from './serviceWorker';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport TSApp from \"./App\";\n\n\nReactDOM.render(<TSApp/>, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n\n\n\n\n","import React, {FC} from \"react\";\r\nimport styles from './FormsControls.module.css';\r\nimport {Field, WrappedFieldProps} from 'redux-form'\r\nimport {WrappedFieldMetaProps} from 'redux-form/lib/Field'\r\nimport {FieldValidatorType} from \"../../../utils/validators/validators\";\r\n\r\ntype FormControlParamsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\n\r\nconst FormControl: FC<FormControlParamsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return (<FormControl{...props}><textarea{...input}{...restProps}/></FormControl>)\r\n}\r\n\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return (<FormControl{...props}><input{...input}{...restProps}/></FormControl>)\r\n}\r\n\r\n\r\nexport function createField<FormKeysType extends string>(placeholder: string | undefined, name: FormKeysType, validators: Array<FieldValidatorType>,\r\n                                                         component: React.FC<WrappedFieldProps>, props = {}, text = '') {\r\n    return <div>\r\n        <Field placeholder={placeholder} name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n        />{text}\r\n    </div>\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__CVa-0\",\"error\":\"FormsControls_error__3rmwE\",\"formSummaryError\":\"FormsControls_formSummaryError__1rQKo\"};"],"sourceRoot":""}